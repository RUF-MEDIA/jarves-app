// components/kundentable.tsx
'use client';

import { useState, useMemo } from 'react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import Link from 'next/link';
import { FiSettings, FiArrowUp, FiArrowDown } from 'react-icons/fi';
import { FaStar } from 'react-icons/fa';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Input } from '@/components/ui/input';
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';

// Definiere die Spalten
const columns = [
  { key: 'autogeneratedNr', label: 'Kundennummer' },
  { key: 'name', label: 'Kundenname' },
  { key: 'status', label: 'Status' },
  { key: 'kategorie', label: 'Kategorie' },
  { key: 'strasse', label: 'Straße' },
  { key: 'postleitzahl', label: 'Postleitzahl' },
  { key: 'stadt', label: 'Stadt' },
  { key: 'umsatzsteuerId', label: 'Umsatzsteuer-ID' },
  { key: 'standort', label: 'Standort' },
  { key: 'homepage', label: 'Homepage' },
  { key: 'jobsite', label: 'Jobsite' },
  { key: 'linkedin', label: 'LinkedIn' },
  { key: 'xing', label: 'Xing' },
  { key: 'zentraleMail', label: 'E-Mail' },
  { key: 'zentralTelefon', label: 'Telefonnummer' },
  { key: 'vermittlungsprovision', label: 'Vermittlungsprovision' },
  { key: 'usbBeschreibung', label: 'USB Beschreibung' },
  { key: 'interneNotizen', label: 'Interne Notizen' },
  { key: 'erstelltAm', label: 'Erstellt Am' },
  { key: 'letzteAenderungAm', label: 'Letzte Änderung Am' },
  { key: 'betreuer', label: 'Betreuer' },
];

// Definiere die Standard-Spalten (nur ausgewählte Spalten werden angezeigt)
const defaultSelectedColumns = ['autogeneratedNr', 'name', 'status', 'kategorie', 'betreuer', 'zentraleMail', 'zentralTelefon'];

// Typ für die Benutzerdaten (optional, verbessert die Typensicherheit)
interface User {
  id: string; // Angepasst von number zu string
  autogeneratedNr: number; // Sollte wahrscheinlich eine Zahl sein
  name: string;
  status: string;
  kategorie: number | null;
  strasse: string;
  postleitzahl: string;
  stadt: string;
  umsatzsteuerId: string | null;
  standort: string;
  homepage?: string | null;
  jobsite?: string | null;
  linkedin?: string | null;
  xing?: string | null;
  zentraleMail?: string | null;
  zentralTelefon?: string | null;
  vermittlungsprovision?: string | null;
  usbBeschreibung?: string | null;
  interneNotizen?: string | null;
  erstelltAm: string;
  letzteAenderungAm: string;
  betreuer?: string | null; // Betreuer optional gemacht
  [key: string]: any; // Indexsignatur hinzugefügt
}

export function KundenTable({ allUsers }: { allUsers: User[] }) {
  const [selectedColumns, setSelectedColumns] = useState(defaultSelectedColumns);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [filterLetter, setFilterLetter] = useState('ALL');
  const [sortConfig, setSortConfig] = useState<{
    key: keyof User;
    direction: 'asc' | 'desc';
  } | null>(null);
  const [selectedRows, setSelectedRows] = useState<Set<string>>(new Set()); // Angepasst von Set<number> zu Set<string>
  const [newStatus, setNewStatus] = useState('');
  const [newBetreuer, setNewBetreuer] = useState('');
  const [newKategorie, setNewKategorie] = useState('');
  const [newVerknuepfung, setNewVerknuepfung] = useState('');

  // Funktion zur Änderung der ausgewählten Spalten
  const handleColumnChange = (key: string) => {
    setSelectedColumns((prev) => (prev.includes(key) ? prev.filter((col) => col !== key) : [...prev, key]));
  };

  // Funktion zur Handhabung der Sortierung
  const handleSort = (key: keyof User) => {
    let direction: 'asc' | 'desc' = 'asc';
    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  // Funktion zur Formatierung von Datumsangaben
  const formatDate = (dateString: string | null) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('de-DE');
  };

  // Funktion zur Darstellung von Sternen basierend auf der Kategorie
  const renderStars = (rating: number | null) => {
    const validRating = rating || 0;
    return (
      <div className="flex space-x-1">
        {Array.from({ length: 5 }, (_, i) => (
          <FaStar key={i} className="w-4 h-4" color={i < validRating ? 'gold' : 'gray'} />
        ))}
      </div>
    );
  };

  // Funktion zur Auswahl einzelner Zeilen
  const handleRowSelect = (id: string) => {
    setSelectedRows((prevSelected) => {
      const newSelected = new Set(prevSelected);
      if (newSelected.has(id)) {
        newSelected.delete(id);
      } else {
        newSelected.add(id);
      }
      return newSelected;
    });
  };

  // Funktion zur Auswahl oder Abwahl aller Zeilen
  const handleSelectAll = () => {
    if (selectedRows.size === allUsers.length) {
      setSelectedRows(new Set());
    } else {
      setSelectedRows(new Set(allUsers.map((user) => user.id)));
    }
  };

  // Ermitteln der verfügbaren Anfangsbuchstaben zur Filterung
  const availableLetters = useMemo(() => {
    const letters = new Set(allUsers.map((user) => user.name.charAt(0).toUpperCase()));
    return Array.from(letters).sort();
  }, [allUsers]);

  // Anwenden des Filters basierend auf dem ausgewählten Buchstaben
  const filteredUsers = filterLetter === 'ALL' ? allUsers : allUsers.filter((user) => user.name.startsWith(filterLetter));

  // Anwenden der Sortierung
  const sortedUsers = useMemo(() => {
    if (!sortConfig) return filteredUsers;

    const sorted = [...filteredUsers].sort((a, b) => {
      const aValue = a[sortConfig.key];
      const bValue = b[sortConfig.key];

      if (aValue < bValue) {
        return sortConfig.direction === 'asc' ? -1 : 1;
      }
      if (aValue > bValue) {
        return sortConfig.direction === 'asc' ? 1 : -1;
      }
      return 0;
    });

    return sorted;
  }, [filteredUsers, sortConfig]);

  const isSidebarOpen = selectedRows.size > 0;

  // Funktion zur Massenaktion (Update oder Delete)
  const confirmBulkAction = async (action: string) => {
    try {
      const selectedIds = Array.from(selectedRows);

      // Erstellen eines Objekts mit den Änderungen
      const updates: any = {};
      if (newStatus) updates.status = newStatus;
      if (newKategorie) updates.kategorie = parseInt(newKategorie, 10);
      if (newBetreuer) updates.betreuerId = newBetreuer;
      if (newVerknuepfung) updates.unternehmensverknuepfung = newVerknuepfung;

      if (action === 'delete') {
        // Senden der Löschanforderung an die API
        const response = await fetch('/api/bulkDeleteUnternehmen', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ ids: selectedIds }),
        });

        if (response.ok) {
          console.log('Unternehmen erfolgreich gelöscht');
          setSelectedRows(new Set());
          // Aktualisieren der Daten oder Neuladen
          // Hier könntest du z.B. die Daten neu laden oder aus dem Zustand entfernen
        } else {
          console.error('Fehler beim Löschen der Unternehmen');
        }
      } else {
        // Senden der Aktualisierungsanforderung an die API
        const response = await fetch('/api/bulkUpdateUnternehmen', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ ids: selectedIds, updates }),
        });

        if (response.ok) {
          console.log('Unternehmen erfolgreich aktualisiert');
          setSelectedRows(new Set());
          // Aktualisieren der Daten oder Neuladen
          setNewStatus('');
          setNewKategorie('');
          setNewBetreuer('');
          setNewVerknuepfung('');
        } else {
          console.error('Fehler beim Aktualisieren der Unternehmen');
        }
      }
    } catch (error) {
      console.error('Fehler bei der Massenaktion:', error);
    }
  };

  // Funktion zur dynamischen Darstellung der Tabellenzellen basierend auf dem Spaltenkey
  const renderCell = (unternehmen: User, key: string) => {
    switch (key) {
      case 'autogeneratedNr':
        return unternehmen.autogeneratedNr;
      case 'name':
        return (
          <Link href={`/kunden/${unternehmen.id}`} className="text-blue-600 hover:underline">
            {unternehmen.name}
          </Link>
        );
      case 'status':
        return <span className="capitalize">{unternehmen.status}</span>;
      case 'kategorie':
        return renderStars(unternehmen.kategorie);
      case 'strasse':
        return unternehmen.strasse;
      case 'postleitzahl':
        return unternehmen.postleitzahl;
      case 'stadt':
        return unternehmen.stadt;
      case 'umsatzsteuerId':
        return unternehmen.umsatzsteuerId || '-';
      case 'standort':
        return unternehmen.standort;
      case 'homepage':
        return unternehmen.homepage ? (
          <a href={unternehmen.homepage} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
            Homepage
          </a>
        ) : (
          '-'
        );
      case 'jobsite':
        return unternehmen.jobsite ? (
          <a href={unternehmen.jobsite} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
            Jobsite
          </a>
        ) : (
          '-'
        );
      case 'linkedin':
        return unternehmen.linkedin ? (
          <a href={unternehmen.linkedin} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
            LinkedIn
          </a>
        ) : (
          '-'
        );
      case 'xing':
        return unternehmen.xing ? (
          <a href={unternehmen.xing} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
            Xing
          </a>
        ) : (
          '-'
        );
      case 'zentraleMail':
        return unternehmen.zentraleMail ? (
          <a href={`mailto:${unternehmen.zentraleMail}`} className="text-blue-600 hover:underline">
            {unternehmen.zentraleMail}
          </a>
        ) : (
          '-'
        );
      case 'zentralTelefon':
        return unternehmen.zentralTelefon ? (
          <a href={`tel:${unternehmen.zentralTelefon}`} className="text-blue-600 hover:underline">
            {unternehmen.zentralTelefon}
          </a>
        ) : (
          '-'
        );
      case 'vermittlungsprovision':
        return unternehmen.vermittlungsprovision || '-';
      case 'usbBeschreibung':
        return unternehmen.usbBeschreibung || '-';
      case 'interneNotizen':
        return unternehmen.interneNotizen || '-';
      case 'erstelltAm':
        return formatDate(unternehmen.erstelltAm);
      case 'letzteAenderungAm':
        return formatDate(unternehmen.letzteAenderungAm);
      case 'betreuer':
        return unternehmen.betreuer || '-';
      default:
        return '-';
    }
  };

  return (
    <div className="p-4 min-h-screen">
      {/* Filter Buttons */}
      <div className="mb-4 flex flex-wrap items-center space-x-2">
        <Button variant={filterLetter === 'ALL' ? 'default' : 'outline'} onClick={() => setFilterLetter('ALL')}>
          ALL
        </Button>
        {availableLetters.map((letter) => (
          <Button key={letter} variant={filterLetter === letter ? 'default' : 'outline'} onClick={() => setFilterLetter(letter)}>
            {letter}
          </Button>
        ))}
      </div>

      {/* Table */}
      <div className="overflow-x-auto bg-white rounded-lg shadow">
        <Table>
          <TableHeader>
            <TableRow className="bg-gray-200">
              {/* Checkbox für die Auswahl aller Zeilen */}
              <TableHead className="px-4 py-2">
                <Checkbox checked={selectedRows.size === allUsers.length} onCheckedChange={handleSelectAll} />
              </TableHead>
              {/* Dynamische Darstellung der Spaltenüberschriften */}
              {columns
                .filter((col) => selectedColumns.includes(col.key))
                .map((col) => (
                  <TableHead key={col.key} onClick={() => handleSort(col.key as keyof User)} className="px-4 py-2 cursor-pointer select-none">
                    <div className="flex items-center space-x-1">
                      <span>{col.label}</span>
                      {sortConfig?.key === col.key && <span>{sortConfig.direction === 'asc' ? <FiArrowUp /> : <FiArrowDown />}</span>}
                    </div>
                  </TableHead>
                ))}
              {/* Einstellungen-Icon für die Spaltenauswahl */}
              <TableHead className="px-4 py-2">
                <FiSettings onClick={() => setIsModalOpen(true)} className="w-5 h-5 text-gray-600 cursor-pointer hover:text-gray-800" />
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {sortedUsers.map((unternehmen) => (
              <TableRow key={unternehmen.id} className="hover:bg-gray-50 transition-colors">
                {/* Checkbox für die Auswahl der Zeile */}
                <TableCell className="px-4 py-2">
                  <Checkbox checked={selectedRows.has(unternehmen.id)} onCheckedChange={() => handleRowSelect(unternehmen.id)} />
                </TableCell>
                {/* Dynamische Darstellung der Zellen basierend auf den ausgewählten Spalten */}
                {selectedColumns.map((colKey) => (
                  <TableCell key={colKey} className="px-4 py-2">
                    {renderCell(unternehmen, colKey)}
                  </TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {/* Sidebar für Massenbearbeitung */}
      {isSidebarOpen && (
        <div className="fixed inset-y-0 right-0 w-full md:w-1/3 bg-white shadow-lg p-6 z-50 overflow-auto">
          <h2 className="text-2xl font-semibold mb-6">Massenbearbeitung ({selectedRows.size} ausgewählt)</h2>
          <div className="space-y-4">
            {/* Status ändern */}
            <div>
              <label htmlFor="status" className="block text-sm font-medium mb-1">
                Status ändern:
              </label>
              <Select onValueChange={(value) => setNewStatus(value)} value={newStatus}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="-- Status auswählen --" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="inaktiv">Inaktiv</SelectItem>
                  <SelectItem value="Zielkunde">Zielkunde</SelectItem>
                  <SelectItem value="pending">Pending</SelectItem>
                  <SelectItem value="aktiv">Aktiv</SelectItem>
                  <SelectItem value="Rahmenvertragspartner">Rahmenvertragspartner</SelectItem>
                  <SelectItem value="nicht_kontaktieren">Nicht kontaktieren</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Kategorie ändern */}
            <div>
              <label htmlFor="kategorie" className="block text-sm font-medium mb-1">
                Kategorie ändern:
              </label>
              <Input
                type="number"
                id="kategorie"
                value={newKategorie}
                onChange={(e) => setNewKategorie(e.target.value)}
                min="1"
                max="5"
                placeholder="1 bis 5"
                className="w-full"
              />
            </div>

            {/* Betreuer zuweisen */}
            <div>
              <label htmlFor="betreuer" className="block text-sm font-medium mb-1">
                Betreuer zuweisen:
              </label>
              <Input
                type="text"
                id="betreuer"
                value={newBetreuer}
                onChange={(e) => setNewBetreuer(e.target.value)}
                placeholder="Name des Betreuers"
                className="w-full"
              />
            </div>

            {/* Unternehmensverknüpfung zuweisen */}
            <div>
              <label htmlFor="verknuepfung" className="block text-sm font-medium mb-1">
                Unternehmensverknüpfung zuweisen:
              </label>
              <Select onValueChange={(value) => setNewVerknuepfung(value)} value={newVerknuepfung}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="-- Verknüpfung auswählen --" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Muttergesellschaft">Muttergesellschaft</SelectItem>
                  <SelectItem value="Tochtergesellschaft">Tochtergesellschaft</SelectItem>
                  <SelectItem value="Schwestergesellschaft">Schwestergesellschaft</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Info-Mail/Newsletter Button */}
            <div>
              <Button variant="secondary" className="w-full">
                Info-Mails/Newsletter senden
              </Button>
            </div>

            {/* Löschen Button */}
            <div>
              <Button variant="destructive" className="w-full" onClick={() => confirmBulkAction('delete')}>
                Ausgewählte löschen
              </Button>
            </div>

            {/* Bestätigen und Abbrechen Buttons */}
            <div className="flex justify-end space-x-2">
              <Button variant="default" onClick={() => confirmBulkAction('update')}>
                Änderungen speichern
              </Button>
              <Button variant="ghost" onClick={() => setSelectedRows(new Set())}>
                Abbrechen
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Modal für Spaltenauswahl */}
      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
        <DialogContent className="max-w-lg">
          <DialogHeader>
            <DialogTitle>Spalten anpassen</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 mt-4">
            {columns.map((col) => (
              <div key={col.key} className="flex items-center">
                <Checkbox
                  checked={selectedColumns.includes(col.key)}
                  onCheckedChange={() => handleColumnChange(col.key)}
                  id={`col-${col.key}`}
                  className="mr-2"
                />
                <label htmlFor={`col-${col.key}`} className="text-sm">
                  {col.label}
                </label>
              </div>
            ))}
          </div>
          <DialogFooter className="mt-6">
            <Button onClick={() => setIsModalOpen(false)}>Schließen</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
