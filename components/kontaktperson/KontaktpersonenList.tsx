// components/KontaktpersonenList.tsx
'use client';

import React, { useState, useEffect, useMemo } from 'react';
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  Row,
  HeaderContext,
  CellContext,
} from '@tanstack/react-table';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
  DropdownMenuItem,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { DataTablePagination } from '@/components/ui/data-table-pagination';
import { ChevronDown, ArrowUpDown, EyeOff, Star, Filter } from 'lucide-react';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Calendar } from '@/components/ui/calendar';
import { DateRange } from 'react-day-picker';
import { format } from 'date-fns';
import { de } from 'date-fns/locale';
import { Slider } from '@/components/ui/slider';
import { Label } from '@/components/ui/label';
import BulkActionSidebarKontaktpersonen from '../BulkActionSidebarKontaktpersonen';
import Link from 'next/link';
import { Calendar as CalendarIcon } from 'lucide-react';
import { cn } from '@/lib/utils';

interface Kontaktperson {
  id: string;
  autogeneratedNr: number;
  email: string | null;
  anrede: string | null;
  betreuerId: string | null;
  duAnsprache: boolean;
  erstelltAm: string;
  kategorie: string | null;
  letzteAenderungAm: string | null;
  linkedin: string | null;
  mobil: string | null;
  nachname: string;
  notiz: string | null;
  positionJobtitel: string | null;
  status: string;
  telefon: string | null;
  titel: string | null;
  vorname: string;
  xing: string | null;
  betreuer: {
    id: string;
    name: string;
  } | null;
  unternehmen: {
    id: string;
    name: string;
  }[];
  [key: string]: any;
}

const columnLabels: { [key: string]: string } = {
  autogeneratedNr: 'Kundennummer',
  nachname: 'Nachname',
  vorname: 'Vorname',
  status: 'Status',
  email: 'E-Mail',
  telefon: 'Telefon',
  duAnsprache: 'Du-Ansprache',
  kategorie: 'Kategorie',
  mobil: 'Mobil',
  positionJobtitel: 'Position/Jobtitel',
  titel: 'Titel',
  linkedin: 'LinkedIn',
  xing: 'Xing',
  notiz: 'Notiz',
  erstelltAm: 'Erstellt Am',
  letzteAenderungAm: 'Letzte Änderung Am',
  betreuer: 'Betreuer',
  unternehmen: 'Unternehmen',
  anrede: 'Anrede',
  id: 'ID',
};

const columnOrder: (keyof Kontaktperson)[] = ['autogeneratedNr', 'nachname', 'vorname', 'status', 'unternehmen', 'email', 'telefon'];

const standardColumns: Set<keyof Kontaktperson> = new Set(columnOrder);

// DateRangeFilter Component
const DateRangeFilter: React.FC<{ column: any }> = ({ column }) => {
  const [date, setDate] = useState<DateRange | undefined>({
    from: undefined,
    to: undefined,
  });

  useEffect(() => {
    if (date?.from && date?.to) {
      column.setFilterValue(date);
    } else {
      column.setFilterValue(undefined);
    }
  }, [column, date]);

  return (
    <div className="p-2">
      <Popover>
        <PopoverTrigger asChild>
          <Button id="date" variant={'outline'} className={cn('w-full justify-start text-left font-normal', !date && 'text-muted-foreground')}>
            <CalendarIcon className="mr-2 h-4 w-4" />
            {date?.from ? (
              date.to ? (
                <>
                  {format(date.from, 'LLL dd, y')} - {format(date.to, 'LLL dd, y')}
                </>
              ) : (
                format(date.from, 'LLL dd, y')
              )
            ) : (
              <span>Datum auswählen</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar initialFocus mode="range" defaultMonth={date?.from} selected={date} onSelect={setDate} numberOfMonths={2} />
        </PopoverContent>
      </Popover>
      {date?.from && date?.to && (
        <Button variant="ghost" onClick={() => setDate({ from: undefined, to: undefined })} className="mt-2 w-full">
          Filter zurücksetzen
        </Button>
      )}
    </div>
  );
};

// NumberRangeFilter Component (falls benötigt)
const NumberRangeFilter: React.FC<{ column: any }> = ({ column }) => {
  const [range, setRange] = useState<[number, number]>([0, 100]);

  useEffect(() => {
    column.setFilterValue(range);
  }, [range, column]);

  const handleRangeChange = (newValue: number[]) => {
    setRange(newValue as [number, number]);
  };

  const resetFilter = () => {
    setRange([0, 100]);
    column.setFilterValue(undefined);
  };

  return (
    <div className="flex flex-col space-y-2 p-2">
      <Label>Nummernbereich</Label>
      <Slider min={0} max={100} step={1} value={range} onValueChange={handleRangeChange} className="w-full" />
      <div className="flex justify-between text-sm text-muted-foreground">
        <span>{range[0]}</span>
        <span>{range[1]}</span>
      </div>
      <Button variant="ghost" size="sm" onClick={resetFilter} className="mt-2">
        Filter zurücksetzen
      </Button>
    </div>
  );
};

// StatusSelectFilter Component
const StatusSelectFilter: React.FC<{ column: any }> = ({ column }) => {
  const [value, setValue] = useState<string>('ALL'); // Setzen auf 'ALL' als Initialwert

  const options = [
    { label: 'Alle', value: 'ALL' }, // Änderung hier von '' zu 'ALL'
    { label: 'Unbekannt', value: 'unbekannt' },
    { label: 'In Kontakt', value: 'inKontakt' },
    { label: 'Nicht kontaktieren', value: 'nichtKontaktieren' },
    { label: 'Ausgeschieden', value: 'ausgeschieden' },
  ];

  useEffect(() => {
    if (value === 'ALL') {
      column.setFilterValue(undefined); // 'ALL' bedeutet kein Filter
    } else {
      column.setFilterValue(value);
    }
  }, [column, value]);

  const handleReset = () => {
    setValue('ALL');
    column.setFilterValue(undefined);
  };

  return (
    <div className="space-y-2">
      <Select value={value} onValueChange={setValue}>
        <SelectTrigger className="w-[180px]">
          <SelectValue placeholder="Status wählen" />
        </SelectTrigger>
        <SelectContent>
          {options.map((option) => (
            <SelectItem key={option.value} value={option.value}>
              {option.label}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      {value !== 'ALL' && (
        <Button variant="ghost" size="sm" onClick={handleReset}>
          Filter zurücksetzen
        </Button>
      )}
    </div>
  );
};

// UnternehmenSearchFilter Component (falls benötigt)
const UnternehmenSearchFilter: React.FC<{ column: any }> = ({ column }) => {
  const [value, setValue] = useState<string>('');

  useEffect(() => {
    column.setFilterValue(value);
  }, [column, value]);

  const handleReset = () => {
    setValue('');
    column.setFilterValue(undefined);
  };

  return (
    <div className="space-y-2 p-2">
      <Input placeholder="Unternehmen suchen..." value={value} onChange={(e) => setValue(e.target.value)} className="w-full" />
      {value && (
        <Button variant="ghost" size="sm" onClick={handleReset} className="w-full">
          Filter zurücksetzen
        </Button>
      )}
    </div>
  );
};

// Erstelle Spalten für die Tabelle
const createColumns = (data: Kontaktperson[]): ColumnDef<Kontaktperson>[] => {
  const allFields = new Set<keyof Kontaktperson>([
    ...columnOrder,
    ...Array.from(new Set(data.flatMap((item) => Object.keys(item) as (keyof Kontaktperson)[]))),
  ]);

  return Array.from(allFields).map(
    (key): ColumnDef<Kontaktperson> => ({
      accessorKey: key,
      header: ({ column }: HeaderContext<Kontaktperson, unknown>) => {
        return (
          <div className="flex items-center space-x-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="-ml-3 h-8 data-[state=open]:bg-accent">
                  <span>{columnLabels[key] || key}</span>
                  <ChevronDown className="ml-2 h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start" className="w-[200px]">
                <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                  <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                  Aufsteigend
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                  <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                  Absteigend
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>
                  <EyeOff className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                  Ausblenden
                </DropdownMenuItem>
                {key === 'status' && (
                  <>
                    <DropdownMenuSeparator />
                    <StatusSelectFilter column={column} />
                  </>
                )}
                {(key === 'erstelltAm' || key === 'letzteAenderungAm') && (
                  <>
                    <DropdownMenuSeparator />
                    <DateRangeFilter column={column} />
                  </>
                )}
                {key === 'unternehmen' && (
                  <>
                    <DropdownMenuSeparator />
                    <UnternehmenSearchFilter column={column} />
                  </>
                )}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        );
      },
      cell: ({ row }: CellContext<Kontaktperson, unknown>) => {
        const value = row.getValue(key as string);

        if (key === 'status') {
          const statusMap: { [key: string]: string } = {
            unbekannt: 'Unbekannt',
            inKontakt: 'In Kontakt',
            nichtKontaktieren: 'Nicht kontaktieren',
            ausgeschieden: 'Ausgeschieden',
          };
          return <div className="w-[200px]">{statusMap[value as string] || '-'}</div>;
        }

        if (key === 'unternehmen') {
          if (Array.isArray(value)) {
            return (
              <div className="w-[200px] space-y-1">
                {value.map((unternehmen: { id: string; name: string }) => (
                  <Link key={unternehmen.id} href={`/kunden/${unternehmen.id}`} className="text-blue-600 hover:underline block">
                    {unternehmen.name}
                  </Link>
                ))}
              </div>
            );
          }
          return <div className="w-[200px]">-</div>;
        }

        return <div className="w-[200px]">{value?.toString() || '-'}</div>;
      },
      filterFn: (row: Row<Kontaktperson>, id: string, filterValue: any) => {
        const value = row.getValue(id);

        if (id === 'status') {
          return !filterValue || filterValue === value;
        }

        if (id === 'erstelltAm' || id === 'letzteAnderungAm') {
          const dateValue = new Date(value as string);
          const { from, to } = filterValue as DateRange;
          if (from && to) {
            return dateValue >= from && dateValue <= to;
          }
          if (from) return dateValue >= from;
          if (to) return dateValue <= to;
          return true;
        }

        if (id === 'unternehmen') {
          if (typeof filterValue === 'string' && filterValue !== '') {
            return (value as { name: string }[]).some((u) => u.name.toLowerCase().includes(filterValue.toLowerCase()));
          }
          return true;
        }

        if (typeof value === 'string') {
          return value.toLowerCase().includes((filterValue as string).toLowerCase());
        }

        return true;
      },
    })
  );
};

export function KontaktpersonenList() {
  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = useState({});
  const [data, setData] = useState<Kontaktperson[]>([]);
  const [filterLetter, setFilterLetter] = useState('ALL');
  const [isBulkActionSidebarOpen, setIsBulkActionSidebarOpen] = useState(false);
  const [newStatus, setNewStatus] = useState('');
  const [newBetreuer, setNewBetreuer] = useState('');
  const [newKategorie, setNewKategorie] = useState('');
  const [betreuerList, setBetreuerList] = useState<{ id: string; name: string }[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [nameFilter, setNameFilter] = useState('');

  useEffect(() => {
    const fetchKontaktpersonen = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch('/api/getKontaktpersonenTest');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const kontaktpersonen = await response.json();
        setData(kontaktpersonen);
      } catch (error) {
        console.error('Fehler beim Laden der Kontaktpersonen:', error);
        setError('Fehler beim Laden der Kontaktpersonen. Bitte versuchen Sie es später erneut.');
      } finally {
        setIsLoading(false);
      }
    };
    fetchKontaktpersonen();
  }, []);

  useEffect(() => {
    const fetchBetreuerList = async () => {
      try {
        const response = await fetch('/api/getBetreuerList');
        if (response.ok) {
          const data = await response.json();
          setBetreuerList(data);
        }
      } catch (error) {
        console.error('Fehler beim Laden der Betreuer:', error);
      }
    };

    fetchBetreuerList();
  }, []);

  const columns = useMemo(() => {
    const dataColumns = createColumns(data);
    const selectColumn: ColumnDef<Kontaktperson> = {
      id: 'select',
      header: ({ table }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected()}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Alle auswählen"
        />
      ),
      cell: ({ row }) => (
        <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Zeile auswählen" />
      ),
      enableSorting: false,
      enableHiding: false,
    };

    // Sortiere die Spalten gemäß der definierten Reihenfolge
    const sortedColumns = dataColumns.sort((a, b) => {
      const aIndex = columnOrder.indexOf(a.id as keyof Kontaktperson);
      const bIndex = columnOrder.indexOf(b.id as keyof Kontaktperson);
      if (aIndex === -1) return 1;
      if (bIndex === -1) return -1;
      return aIndex - bIndex;
    });

    return [selectColumn, ...sortedColumns];
  }, [data]);

  useEffect(() => {
    const initialVisibility: VisibilityState = {};
    columns.forEach((column) => {
      if ('accessorKey' in column && typeof column.accessorKey === 'string') {
        initialVisibility[column.accessorKey] = standardColumns.has(column.accessorKey as keyof Kontaktperson);
      }
    });
    setColumnVisibility(initialVisibility);
  }, [columns]);

  const availableLetters = useMemo(() => {
    const letters = new Set(
      data
        .map((kontaktperson) => kontaktperson.nachname?.[0]?.toUpperCase())
        .filter((letter): letter is string => typeof letter === 'string' && letter.length > 0)
    );
    return Array.from(letters).sort();
  }, [data]);

  const filteredData = useMemo(() => {
    return data.filter((kontaktperson) => {
      // A-B-C Filter
      if (filterLetter !== 'ALL') {
        if (!kontaktperson.nachname || typeof kontaktperson.nachname !== 'string') {
          return false;
        }
        if (!kontaktperson.nachname.toUpperCase().startsWith(filterLetter)) {
          return false;
        }
      }

      // Vor- und Nachname Filter
      if (nameFilter) {
        const fullName = `${kontaktperson.vorname || ''} ${kontaktperson.nachname || ''}`.toLowerCase();
        if (!fullName.includes(nameFilter.toLowerCase())) {
          return false;
        }
      }

      return true;
    });
  }, [data, filterLetter, nameFilter]);

  const table = useReactTable({
    data: filteredData,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
    getRowId: (row) => row.id,
    filterFns: {
      custom: (row, columnId, filterValue) => {
        const column = columns.find((col) => 'accessorKey' in col && col.accessorKey === columnId);
        if (column && 'filterFn' in column) {
          return (column.filterFn as any)(row, columnId, filterValue);
        }
        return true;
      },
    },
  });

  const handleFilterChange = (letter: string) => {
    setFilterLetter(letter);
  };

  const handleBulkUpdate = async () => {
    const selectedIds = Object.keys(rowSelection);
    if (selectedIds.length === 0) return;

    const updates: any = {};
    if (newStatus) updates.status = newStatus;
    if (newKategorie) updates.kategorie = newKategorie;
    if (newBetreuer) updates.betreuerId = newBetreuer;

    try {
      const response = await fetch('/api/bulkUpdateKontaktpersonen', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds, updates }),
      });

      if (response.ok) {
        console.log('Massenaktualisierung erfolgreich durchgeführt');
        const updatedData = await fetch('/api/getKontaktpersonenTest').then((res) => res.json());
        setData(updatedData);
        setIsBulkActionSidebarOpen(false);
        setRowSelection({});
        setNewStatus('');
        setNewKategorie('');
        setNewBetreuer('');
      } else {
        const errorData = await response.json();
        console.error('Fehler bei der Durchführung der Massenaktualisierung:', errorData.error);
      }
    } catch (error) {
      console.error('Fehler bei der Durchführung der Massenaktualisierung:', error);
    }
  };

  const handleBulkDelete = async () => {
    const selectedIds = Object.keys(rowSelection);
    if (selectedIds.length === 0) return;

    try {
      const response = await fetch('/api/bulkDeleteKontaktpersonen', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds }),
      });

      if (response.ok) {
        console.log('Massenlöschung erfolgreich durchgeführt');
        const updatedData = await fetch('/api/getKontaktpersonenTest').then((res) => res.json());
        setData(updatedData);
        setIsBulkActionSidebarOpen(false);
        setRowSelection({});
      } else {
        const errorData = await response.json();
        console.error('Fehler bei der Durchführung der Massenlöschung:', errorData.error);
      }
    } catch (error) {
      console.error('Fehler bei der Durchführung der Massenlöschung:', error);
    }
  };

  if (isLoading) {
    return <div>Lade Kontaktpersonen...</div>;
  }

  if (error) {
    return <div>Fehler: {error}</div>;
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2 overflow-x-auto">
          <Button variant={filterLetter === 'ALL' ? 'default' : 'outline'} onClick={() => handleFilterChange('ALL')}>
            ALLE
          </Button>
          {availableLetters.map((letter) => (
            <Button key={letter} variant={filterLetter === letter ? 'default' : 'outline'} onClick={() => handleFilterChange(letter)}>
              {letter}
            </Button>
          ))}
        </div>
        <div className="flex items-center space-x-2">
          <Input placeholder="Vor- oder Nachname suchen..." value={nameFilter} onChange={(e) => setNameFilter(e.target.value)} className="max-w-sm" />
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="ml-auto">
                Spalten <ChevronDown className="ml-2 h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              {table
                .getAllColumns()
                .filter((column) => column.id !== 'select' && typeof column.accessorFn !== 'undefined')
                .map((column) => {
                  return (
                    <DropdownMenuCheckboxItem
                      key={column.id}
                      className="capitalize"
                      checked={column.getIsVisible()}
                      onCheckedChange={(value) => column.toggleVisibility(!!value)}
                    >
                      {columnLabels[column.id] || column.id}
                    </DropdownMenuCheckboxItem>
                  );
                })}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
      <div className="rounded-md border bg-white">
        <ScrollArea className="w-full overflow-auto" style={{ maxWidth: '100%' }}>
          <Table style={{ minWidth: '1000px' }}>
            <TableHeader>
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <TableHead key={header.id} className="bg-gray-100">
                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                    </TableHead>
                  ))}
                </TableRow>
              ))}
            </TableHeader>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>
                    {row.getVisibleCells().map((cell) => (
                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>
                    ))}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={columns.length} className="h-24 text-center">
                    Keine Ergebnisse.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>
      <DataTablePagination table={table} />
      <div className="flex justify-end">
        <Button variant="outline" onClick={() => setIsBulkActionSidebarOpen(true)} disabled={Object.keys(rowSelection).length === 0}>
          Massenbearbeitung
        </Button>
      </div>
      <BulkActionSidebarKontaktpersonen
        isOpen={isBulkActionSidebarOpen}
        selectedCount={Object.keys(rowSelection).length}
        onClose={() => setIsBulkActionSidebarOpen(false)}
        newStatus={newStatus}
        setNewStatus={setNewStatus}
        newBetreuer={newBetreuer}
        setNewBetreuer={setNewBetreuer}
        newKategorie={newKategorie}
        setNewKategorie={setNewKategorie}
        onDelete={handleBulkDelete}
        onUpdate={handleBulkUpdate}
        betreuerList={betreuerList}
      />
    </div>
  );
}
