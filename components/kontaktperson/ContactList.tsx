// components/kontaktperson/ContactList.tsx
'use client';

import React, { useState, useEffect, useMemo } from 'react';
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from '@tanstack/react-table';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
  DropdownMenuItem,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { DataTablePagination } from '@/components/ui/data-table-pagination';
import { ChevronDown, ArrowUpDown, EyeOff, Star } from 'lucide-react';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';

interface Unternehmen {
  id: string;
  autogeneratedNr: number;
  name: string;
  status: string;
  kategorie: number | null;
  strasse: string;
  postleitzahl: string;
  stadt: string;
  umsatzsteuerId: string | null;
  standort: string | null;
  homepage: string | null;
  jobsite: string | null;
  linkedin: string | null;
  xing: string | null;
  zentraleMail: string | null;
  zentralTelefon: string | null;
  vermittlungsprovision: string | null;
  usbBeschreibung: string | null;
  interneNotizen: string | null;
  erstelltAm: string;
  letzteAenderungAm: string | null;
  betreuer: {
    id: string;
    name: string;
  } | null;
  [key: string]: any;
}

const columnLabels: { [key: string]: string } = {
  autogeneratedNr: 'Kundennummer',
  name: 'Kundenname',
  status: 'Status',
  kategorie: 'Kategorie',
  strasse: 'Straße',
  postleitzahl: 'Postleitzahl',
  stadt: 'Stadt',
  umsatzsteuerId: 'Umsatzsteuer-ID',
  standort: 'Standort',
  homepage: 'Homepage',
  jobsite: 'Jobsite',
  linkedin: 'LinkedIn',
  xing: 'Xing',
  zentraleMail: 'E-Mail',
  zentralTelefon: 'Telefonnummer',
  vermittlungsprovision: 'Vermittlungsprovision',
  usbBeschreibung: 'USB Beschreibung',
  interneNotizen: 'Interne Notizen',
  erstelltAm: 'Erstellt Am',
  letzteAenderungAm: 'Letzte Änderung Am',
  betreuer: 'Betreuer',
};

const standardColumns: (keyof Unternehmen)[] = [
  'autogeneratedNr',
  'name',
  'status',
  'kategorie',
  'zentraleMail',
  'zentralTelefon',
  'betreuer',
  'erstelltAm',
  'letzteAenderungAm',
];

const StarRating: React.FC<{ rating: number | null }> = ({ rating }) => {
  return (
    <div className="flex">
      {[1, 2, 3, 4, 5].map((star) => (
        <Star key={star} className={`h-4 w-4 ${rating !== null && star <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} />
      ))}
    </div>
  );
};

const createColumns = (data: Unternehmen[]): ColumnDef<Unternehmen>[] => {
  const allFields = new Set<string>();
  data.forEach((item) => Object.keys(item).forEach((key) => allFields.add(key)));

  return Array.from(allFields).map((key) => ({
    accessorKey: key,
    header: ({ column }) => {
      return (
        <div className="flex items-center space-x-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm" className="-ml-3 h-8 data-[state=open]:bg-accent">
                <span>{columnLabels[key] || key.charAt(0).toUpperCase() + key.slice(1)}</span>
                <ChevronDown className="ml-2 h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start">
              <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Aufsteigend
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Absteigend
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>
                <EyeOff className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                Ausblenden
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      );
    },
    cell: ({ row }) => {
      const value = row.getValue(key);
      if (key === 'kategorie') {
        return <StarRating rating={value as number | null} />;
      }
      if (key === 'betreuer') {
        return <div className="w-[200px]">{(value as Unternehmen['betreuer'])?.name || '-'}</div>;
      }
      if (key === 'erstelltAm' || key === 'letzteAenderungAm') {
        return <div className="w-[100px]">{value ? new Date(value as string).toLocaleDateString() : '-'}</div>;
      }
      if (typeof value === 'boolean') {
        return <div className="w-[100px]">{value ? 'Ja' : 'Nein'}</div>;
      }
      return <div className="w-[200px]">{value?.toString() || '-'}</div>;
    },
  }));
};

export function ContactList() {
  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = useState({});
  const [data, setData] = useState<Unternehmen[]>([]);
  const [filterLetter, setFilterLetter] = useState('ALL');
  const [isBulkActionOpen, setIsBulkActionOpen] = useState(false);
  const [bulkAction, setBulkAction] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchUnternehmen = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch('/api/getUnternehmenTest');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const unternehmen = await response.json();
        setData(unternehmen);
      } catch (error) {
        console.error('Fehler beim Laden der Unternehmen:', error);
        setError('Fehler beim Laden der Unternehmen. Bitte versuchen Sie es später erneut.');
      } finally {
        setIsLoading(false);
      }
    };
    fetchUnternehmen();
  }, []);

  const columns = useMemo(() => {
    const allColumns = createColumns(data);
    const selectColumn: ColumnDef<Unternehmen> = {
      id: 'select',
      header: ({ table }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected()}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Alle auswählen"
        />
      ),
      cell: ({ row }) => (
        <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Zeile auswählen" />
      ),
      enableSorting: false,
      enableHiding: false,
    };
    return [selectColumn, ...allColumns];
  }, [data]);

  useEffect(() => {
    const initialVisibility: VisibilityState = {};
    columns.forEach((column) => {
      if ('accessorKey' in column) {
        initialVisibility[column.accessorKey as string] = standardColumns.includes(column.accessorKey as keyof Unternehmen);
      }
    });
    setColumnVisibility(initialVisibility);
  }, [columns]);

  const availableLetters = useMemo(() => {
    const letters = new Set(data.map((unternehmen) => unternehmen.name?.[0]?.toUpperCase()).filter(Boolean));
    return Array.from(letters).sort();
  }, [data]);

  const filteredData = useMemo(() => {
    if (filterLetter === 'ALL') return data;
    return data.filter((unternehmen) => unternehmen.name?.toUpperCase().startsWith(filterLetter));
  }, [data, filterLetter]);

  const table = useReactTable({
    data: filteredData,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  });

  const handleFilterChange = (letter: string) => {
    setFilterLetter(letter);
    table.resetPageIndex();
  };

  const handleBulkAction = async () => {
    const selectedIds = Object.keys(rowSelection);
    if (selectedIds.length === 0) return;

    console.log(`Führe ${bulkAction} für folgende IDs aus:`, selectedIds);

    try {
      const response = await fetch('/api/bulkActionUnternehmen', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: bulkAction, ids: selectedIds }),
      });

      if (response.ok) {
        console.log('Massenaktion erfolgreich durchgeführt');
        // Hier könnten Sie die Unternehmensliste neu laden oder aktualisieren
      } else {
        console.error('Fehler bei der Durchführung der Massenaktion');
      }
    } catch (error) {
      console.error('Fehler bei der Durchführung der Massenaktion:', error);
    }

    setIsBulkActionOpen(false);
    setBulkAction('');
    setRowSelection({});
  };

  if (isLoading) {
    return <div>Lade Unternehmen...</div>;
  }

  if (error) {
    return <div>Fehler: {error}</div>;
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2 overflow-x-auto">
          <Button variant={filterLetter === 'ALL' ? 'default' : 'outline'} onClick={() => handleFilterChange('ALL')}>
            ALLE
          </Button>
          {availableLetters.map((letter) => (
            <Button key={letter} variant={filterLetter === letter ? 'default' : 'outline'} onClick={() => handleFilterChange(letter)}>
              {letter}
            </Button>
          ))}
        </div>
        <div className="flex items-center space-x-2">
          <Input
            placeholder="Unternehmen filtern..."
            value={(table.getColumn('name')?.getFilterValue() as string) ?? ''}
            onChange={(event) => table.getColumn('name')?.setFilterValue(event.target.value)}
            className="max-w-sm"
          />
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="ml-auto">
                Spalten <ChevronDown className="ml-2 h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              {table
                .getAllColumns()
                .filter((column) => column.id !== 'select' && typeof column.accessorFn !== 'undefined')
                .map((column) => {
                  return (
                    <DropdownMenuCheckboxItem
                      key={column.id}
                      className="capitalize"
                      checked={column.getIsVisible()}
                      onCheckedChange={(value) => column.toggleVisibility(!!value)}
                    >
                      {columnLabels[column.id] || column.id}
                    </DropdownMenuCheckboxItem>
                  );
                })}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
      <div className="rounded-md border bg-white">
        <ScrollArea className="w-full overflow-auto" style={{ maxWidth: '100%' }}>
          <Table>
            <TableHeader>
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <TableHead key={header.id} className="bg-gray-100">
                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                    </TableHead>
                  ))}
                </TableRow>
              ))}
            </TableHeader>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>
                    {row.getVisibleCells().map((cell) => (
                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>
                    ))}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={columns.length} className="h-24 text-center">
                    Keine Ergebnisse.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>
      <DataTablePagination table={table} />
      <div className="flex justify-end">
        <Dialog open={isBulkActionOpen} onOpenChange={setIsBulkActionOpen}>
          <DialogTrigger asChild>
            <Button variant="outline" disabled={Object.keys(rowSelection).length === 0}>
              Massenbearbeitung
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Massenbearbeitung</DialogTitle>
            </DialogHeader>
            <Select value={bulkAction} onValueChange={setBulkAction}>
              <SelectTrigger>
                <SelectValue placeholder="Aktion auswählen" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="delete">Löschen</SelectItem>
                <SelectItem value="export">Exportieren</SelectItem>
              </SelectContent>
            </Select>
            <DialogFooter>
              <Button onClick={handleBulkAction}>Ausführen</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}
