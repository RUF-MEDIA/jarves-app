// ContactList.tsx
'use client';
import React, { useState, useEffect, useMemo } from 'react';
import { format } from 'date-fns';
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from '@tanstack/react-table';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
  DropdownMenuItem,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { DataTablePagination } from '@/components/ui/data-table-pagination';
import { ChevronDown, ArrowUpDown, Star } from 'lucide-react';
import { Label } from '@/components/ui/label';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import BulkActionSidebar from '../BulkActionSidebar';
import Link from 'next/link';
import { LetterFilter } from '../list/letter-filter';
import { ColumnSelector } from '../list/column-selector';
import { GlobalSearch } from '../list/global-search';
import DateRangeFilter from '../list/DateRangeFilter';
import NumberRangeFilter from '../list/NumberRangeFilter';

interface DateRange {
  from: Date | null;
  to: Date | null;
}

interface Unternehmen {
  id: string;
  autogeneratedNr: number;
  name: string;
  status: string;
  kategorie: number | null;
  strasse: string;
  postleitzahl: string;
  stadt: string;
  umsatzsteuerId: string | null;
  standort: string | null;
  homepage: string | null;
  jobsite: string | null;
  linkedin: string | null;
  xing: string | null;
  zentraleMail: string | null;
  zentralTelefon: string | null;
  vermittlungsprovision: string | null;
  usbBeschreibung: string | null;
  interneNotizen: string | null;
  erstelltAm: string;
  letzteAenderungAm: string | null;
  betreuer: {
    id: string;
    name: string;
  } | null;
  [key: string]: any;
}

const columnLabels: { [key: string]: string } = {
  autogeneratedNr: 'Kundennummer',
  name: 'Kundenname',
  status: 'Status',
  kategorie: 'Kategorie',
  strasse: 'Straße',
  postleitzahl: 'Postleitzahl',
  stadt: 'Stadt',
  umsatzsteuerId: 'Umsatzsteuer-ID',
  standort: 'Standort',
  homepage: 'Homepage',
  jobsite: 'Jobsite',
  linkedin: 'LinkedIn',
  xing: 'Xing',
  zentraleMail: 'E-Mail',
  zentralTelefon: 'Telefonnummer',
  vermittlungsprovision: 'Vermittlungsprovision',
  usbBeschreibung: 'USB Beschreibung',
  interneNotizen: 'Interne Notizen',
  erstelltAm: 'Erstellt Am',
  letzteAenderungAm: 'Letzte Änderung Am',
  betreuer: 'Betreuer',
};

const standardColumns: (keyof Unternehmen)[] = [
  'autogeneratedNr',
  'name',
  'status',
  'kategorie',
  'zentraleMail',
  'zentralTelefon',
  'betreuer',
  'erstelltAm',
  'letzteAenderungAm',
];

const StarRating: React.FC<{ rating: number | null }> = ({ rating }) => {
  return (
    <div className="flex">
      {[1, 2, 3, 4, 5].map((star) => (
        <Star key={star} className={`h-4 w-4 ${rating !== null && star <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} />
      ))}
    </div>
  );
};

const StatusSelectFilter: React.FC<{ column: any; options: string[] }> = ({ column, options }) => {
  const [selectedValue, setSelectedValue] = useState<string>('');

  useEffect(() => {
    column.setFilterValue(selectedValue || undefined);
  }, [selectedValue, column]);

  const handleReset = () => {
    setSelectedValue('');
    column.setFilterValue(undefined);
  };

  return (
    <div className="space-y-2">
      <Select value={selectedValue} onValueChange={(value) => setSelectedValue(value)}>
        <SelectTrigger>
          <SelectValue placeholder="Filter auswählen" />
        </SelectTrigger>
        <SelectContent>
          {options.map((option) => (
            <SelectItem key={option} value={option}>
              {option}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      {selectedValue && (
        <Button variant="ghost" size="sm" onClick={handleReset}>
          Filter zurücksetzen
        </Button>
      )}
    </div>
  );
};

const StarRatingFilter: React.FC<{ column: any }> = ({ column }) => {
  const [rating, setRating] = useState<number | null>(null);

  useEffect(() => {
    column.setFilterValue(rating);
  }, [rating, column]);

  return (
    <div className="flex flex-col space-y-2 p-2">
      <Label>Mindestbewertung</Label>
      <div className="flex">
        {[1, 2, 3, 4, 5].map((star) => (
          <Star
            key={star}
            className={`h-6 w-6 cursor-pointer ${rating !== null && star <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
            onClick={() => setRating(star === rating ? null : star)}
          />
        ))}
      </div>
      {rating !== null && (
        <Button variant="ghost" size="sm" onClick={() => setRating(null)}>
          Filter zurücksetzen
        </Button>
      )}
    </div>
  );
};

const createColumns = (data: Unternehmen[]): ColumnDef<Unternehmen>[] => {
  const allFields = new Set<string>();
  data.forEach((item) => Object.keys(item).forEach((key) => allFields.add(key)));

  allFields.delete('id');

  return Array.from(allFields).map(
    (key): ColumnDef<Unternehmen> => ({
      accessorKey: key,
      header: ({ column }) => {
        const isNameColumn = key === 'name';

        return (
          <div className="flex items-center space-x-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  className={`-ml-3 h-8 data-[state=open]:bg-accent ${isNameColumn ? 'ml-0' : ''}`}
                  aria-label={`${columnLabels[key] || key} Optionen`}
                >
                  <span>{columnLabels[key] || key.charAt(0).toUpperCase() + key.slice(1)}</span>
                  {column.getCanSort() && <ArrowUpDown className="ml-2 h-4 w-4" />}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start" className="w-80 p-4">
                <div className="text-base font-semibold mb-2">Optionen für {columnLabels[key] || key}</div>
                <div className="border-b my-2"></div>
                {column.getCanSort() && (
                  <div className="mb-4">
                    <div className="font-medium">Sortieren</div>
                    <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                      <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                      Aufsteigend
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                      <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                      Absteigend
                    </DropdownMenuItem>
                  </div>
                )}
                <div className="border-b my-2"></div>
                <div>
                  <div className="font-medium mb-2">Filter</div>
                  {key === 'erstelltAm' || key === 'letzteAenderungAm' ? (
                    <DateRangeFilter column={column} />
                  ) : key === 'autogeneratedNr' ? (
                    <NumberRangeFilter column={column} />
                  ) : key === 'status' ? (
                    <StatusSelectFilter column={column} options={['aktiv', 'inaktiv', 'interessent', 'Zielkunde']} />
                  ) : key === 'kategorie' ? (
                    <StarRatingFilter column={column} />
                  ) : isNameColumn ? (
                    <div className="text-sm text-gray-600">Kein Filter verfügbar</div>
                  ) : (
                    <Input
                      placeholder="Suchen..."
                      value={(column.getFilterValue() as string) ?? ''}
                      onChange={(event) => column.setFilterValue(event.target.value)}
                      className="max-w-sm"
                    />
                  )}
                </div>
                <div className="text-sm text-gray-600 mt-4"></div>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        );
      },
      cell: ({ row }) => {
        const value = row.getValue(key);
        if (key === 'name') {
          return (
            <Link href={`/kunden/${row.original.id}`} className="text-blue-600 hover:underline" target="_blank" rel="noopener noreferrer">
              {value as string}
            </Link>
          );
        }
        if (key === 'kategorie') {
          return <StarRating rating={value as number | null} />;
        }
        if (key === 'betreuer') {
          return <div className="w-[200px]">{(value as Unternehmen['betreuer'])?.name || '-'}</div>;
        }
        if (key === 'erstelltAm' || key === 'letzteAenderungAm') {
          return <div className="w-[100px]">{value ? format(new Date(value as string), 'dd.MM.yyyy') : '-'}</div>;
        }
        if (key === 'zentralTelefon') {
          return value ? (
            <Link href={`tel:${value}`} className="text-blue-600 hover:underline">
              {value as string}
            </Link>
          ) : (
            '-'
          );
        }
        if (key === 'zentraleMail') {
          return value ? (
            <Link href={`mailto:${value}`} className="text-blue-600 hover:underline">
              {value as string}
            </Link>
          ) : (
            '-'
          );
        }
        if (key === 'homepage' || key === 'jobsite' || key === 'linkedin') {
          return value ? (
            <Link href={value as string} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
              {value as string}
            </Link>
          ) : (
            '-'
          );
        }
        if (typeof value === 'boolean') {
          return <div className="w-[100px]">{value ? 'Ja' : 'Nein'}</div>;
        }
        return <div className="w-[200px]">{value?.toString() || '-'}</div>;
      },
      sortingFn: (rowA, rowB, columnId) => {
        const a = rowA.getValue(columnId);
        const b = rowB.getValue(columnId);

        if (a === null || a === undefined) return 1;
        if (b === null || b === undefined) return -1;
        if (a === b) return 0;

        if (typeof a === 'number' && typeof b === 'number') {
          return a - b;
        }
        if (typeof a === 'string' && typeof b === 'string') {
          return a.localeCompare(b);
        }
        if (key === 'betreuer') {
          return ((a as Unternehmen['betreuer'])?.name || '').localeCompare((b as Unternehmen['betreuer'])?.name || '');
        }
        if (key === 'erstelltAm' || key === 'letzteAenderungAm') {
          return new Date(a as string).getTime() - new Date(b as string).getTime();
        }
        return 0;
      },
      filterFn: (row, id, filterValue) => {
        if (key === 'autogeneratedNr') {
          const value = row.getValue(id) as number;
          const [min, max] = filterValue as [number, number];
          return value >= min && value <= max;
        }
        if (key === 'kategorie') {
          const rating = row.getValue(id) as number | null;
          if (filterValue === null) return true;
          if (filterValue === 0) return rating === null || rating === 0;
          return rating !== null && rating >= filterValue;
        }
        if (key === 'status') {
          const status = row.getValue(id) as string;
          return filterValue === undefined || status === filterValue;
        }
        if (key === 'erstelltAm' || key === 'letzteAenderungAm') {
          const date = row.getValue(id) as string;
          const cellDate = new Date(date);
          const { from, to } = filterValue as DateRange;

          if (from && to) {
            return cellDate >= from && cellDate <= to;
          }
          if (from) {
            return cellDate >= from;
          }
          if (to) {
            return cellDate <= to;
          }
          return true;
        }
        const cellValue = row.getValue(id);
        if (typeof cellValue === 'string') {
          return cellValue.toLowerCase().includes((filterValue as string).toLowerCase());
        }
        return String(cellValue)
          .toLowerCase()
          .includes((filterValue as string).toLowerCase());
      },
    })
  );
};

export function ContactList() {
  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = useState({});
  const [data, setData] = useState<Unternehmen[]>([]);
  const [filterLetter, setFilterLetter] = useState('ALL');
  const [isBulkActionSidebarOpen, setIsBulkActionSidebarOpen] = useState(false);
  const [newStatus, setNewStatus] = useState('');
  const [newBetreuer, setNewBetreuer] = useState('');
  const [newKategorie, setNewKategorie] = useState('');
  const [newVerknuepfung, setNewVerknuepfung] = useState('');
  const [betreuerList, setBetreuerList] = useState<{ id: string; name: string }[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Initiales Laden der Daten
  useEffect(() => {
    const fetchUnternehmen = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch('/api/getUnternehmenTest');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const unternehmen = await response.json();
        setData(unternehmen);
      } catch (error) {
        console.error('Fehler beim Laden der Unternehmen:', error);
        setError('Fehler beim Laden der Unternehmen. Bitte versuchen Sie es später erneut.');
      } finally {
        setIsLoading(false);
      }
    };
    fetchUnternehmen();
  }, []);

  // Laden der Betreuerliste
  useEffect(() => {
    const fetchBetreuerList = async () => {
      try {
        const response = await fetch('/api/getBetreuerList');
        if (response.ok) {
          const data = await response.json();
          setBetreuerList(data);
        }
      } catch (error) {
        console.error('Fehler beim Laden der Betreuer:', error);
      }
    };

    fetchBetreuerList();
  }, []);

  // Definition der Spalten einschließlich der Auswahl-Spalte
  const columns = useMemo(() => {
    const allColumns = createColumns(data);
    const selectColumn: ColumnDef<Unternehmen> = {
      id: 'select',
      header: ({ table }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected()}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Alle auswählen"
        />
      ),
      cell: ({ row }) => (
        <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label={`Zeile ${row.id} auswählen`} />
      ),
      enableSorting: false,
      enableHiding: false,
    };
    return [selectColumn, ...allColumns];
  }, [data]);

  // Laden der Spaltenansicht aus dem localStorage
  useEffect(() => {
    const savedColumnVisibility = localStorage.getItem('columnVisibility_unternehmen-list');
    if (savedColumnVisibility) {
      const parsedVisibility = JSON.parse(savedColumnVisibility);
      setColumnVisibility(parsedVisibility);
    } else {
      const initialVisibility: VisibilityState = {};
      columns.forEach((column) => {
        if ('accessorKey' in column && typeof column.accessorKey === 'string') {
          initialVisibility[column.accessorKey] = standardColumns.includes(column.accessorKey as keyof Unternehmen);
        }
      });
      setColumnVisibility(initialVisibility);
      localStorage.setItem('columnVisibility_unternehmen-list', JSON.stringify(initialVisibility));
    }
  }, [columns]);

  // Ermitteln der verfügbaren Buchstaben für den Filter
  const availableLetters = useMemo(() => {
    const letters = new Set(data.map((unternehmen) => unternehmen.name?.[0]?.toUpperCase()).filter(Boolean));
    return Array.from(letters).sort();
  }, [data]);

  // Anwenden des Buchstabenfilters
  const filteredData = useMemo(() => {
    if (filterLetter === 'ALL') return data;
    return data.filter((unternehmen) => unternehmen.name?.toUpperCase().startsWith(filterLetter));
  }, [data, filterLetter]);

  // Setup der Tabelle
  const table = useReactTable({
    data: filteredData, // Verwenden von gefilterten Daten
    columns,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
    enableRowSelection: true,
    onRowSelectionChange: setRowSelection,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: (updatedVisibility) => {
      setColumnVisibility(updatedVisibility);
      localStorage.setItem('columnVisibility_unternehmen-list', JSON.stringify(updatedVisibility));
    },
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getRowId: (row) => row.id,
  });

  // Handler für den Buchstabenfilter
  const handleFilterChange = (letter: string) => {
    setFilterLetter(letter);
    table.resetPageIndex();
  };

  // Handler für Massenaktualisierung
  const handleBulkUpdate = async () => {
    const selectedIds = Object.keys(rowSelection);
    if (selectedIds.length === 0) return;

    const updates = {
      status: newStatus || undefined,
      kategorie: newKategorie || undefined,
      betreuerId: newBetreuer || undefined,
      unternehmensverknuepfung: newVerknuepfung || undefined,
    };

    try {
      const response = await fetch('/api/bulkUpdateUnternehmen', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds, updates }),
      });

      if (response.ok) {
        console.log('Massenaktualisierung erfolgreich durchgeführt');
        const updatedData = await fetch('/api/getUnternehmenTest').then((res) => res.json());
        setData(updatedData);
        setIsBulkActionSidebarOpen(false);
        setRowSelection({});
        setNewStatus('');
        setNewKategorie('');
        setNewBetreuer('');
        setNewVerknuepfung('');
      } else {
        console.error('Fehler bei der Durchführung der Massenaktualisierung');
      }
    } catch (error) {
      console.error('Fehler bei der Durchführung der Massenaktualisierung:', error);
    }
  };

  // Handler für Massenlöschung
  const handleBulkDelete = async () => {
    const selectedIds = Object.keys(rowSelection);
    if (selectedIds.length === 0) return;

    try {
      const response = await fetch('/api/bulkDeleteUnternehmen', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds }),
      });

      if (response.ok) {
        console.log('Massenlöschung erfolgreich durchgeführt');
        const updatedData = await fetch('/api/getUnternehmenTest').then((res) => res.json());
        setData(updatedData);
        setIsBulkActionSidebarOpen(false);
        setRowSelection({});
      } else {
        console.error('Fehler bei der Durchführung der Massenlöschung');
      }
    } catch (error) {
      console.error('Fehler bei der Durchführung der Massenlöschung:', error);
    }
  };

  if (isLoading) {
    return <div>Lade Unternehmen...</div>;
  }

  if (error) {
    return <div>Fehler: {error}</div>;
  }

  return (
    <div className="space-y-4">
      {/* Filter- und Suchleiste */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2 overflow-x-auto">
          <LetterFilter availableLetters={availableLetters} currentFilter={filterLetter} onFilterChange={handleFilterChange} />
        </div>
        <div className="flex items-center space-x-2">
          <GlobalSearch table={table} />
          <ColumnSelector table={table} columnLabels={columnLabels} listId="unternehmen-list" />
        </div>
      </div>

      {/* Tabelle */}
      <div className="rounded-md border bg-white">
        <ScrollArea className="w-full overflow-auto" style={{ maxWidth: '100%' }}>
          <Table style={{ minWidth: '1000px' }}>
            <TableHeader>
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <TableHead key={header.id} className="bg-gray-100">
                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                    </TableHead>
                  ))}
                </TableRow>
              ))}
            </TableHeader>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>
                    {row.getVisibleCells().map((cell) => (
                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>
                    ))}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={columns.length} className="h-24 text-center">
                    Keine Ergebnisse.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>

      {/* Paginierung */}
      <DataTablePagination table={table} />

      {/* Massenbearbeitungs-Button */}
      <div className="flex justify-end">
        <Button variant="outline" onClick={() => setIsBulkActionSidebarOpen(true)} disabled={Object.keys(rowSelection).length === 0}>
          Massenbearbeitung
        </Button>
      </div>

      {/* Bulk Action Sidebar */}
      <BulkActionSidebar
        isOpen={isBulkActionSidebarOpen}
        selectedCount={Object.keys(rowSelection).length}
        onClose={() => setIsBulkActionSidebarOpen(false)}
        newStatus={newStatus}
        setNewStatus={setNewStatus}
        newBetreuer={newBetreuer}
        setNewBetreuer={setNewBetreuer}
        newKategorie={newKategorie}
        setNewKategorie={setNewKategorie}
        newVerknuepfung={newVerknuepfung}
        setNewVerknuepfung={setNewVerknuepfung}
        onDelete={handleBulkDelete}
        onUpdate={handleBulkUpdate}
        betreuerList={betreuerList}
      />
    </div>
  );
}
