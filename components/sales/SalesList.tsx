// components/sales/SalesList.tsx
'use client';

import React, { useState, useEffect, useMemo } from 'react';
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from '@tanstack/react-table';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
  DropdownMenuItem,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Calendar } from '@/components/ui/calendar';
import { DataTablePagination } from '@/components/ui/data-table-pagination';
import Link from 'next/link';
import { ChevronDown, ArrowUpDown, EyeOff, CalendarIcon } from 'lucide-react';
import { DateRange } from 'react-day-picker';
import { format } from 'date-fns';
import { cn } from '@/lib/utils';

interface Sales {
  id: string;
  autogeneratedNr: number;
  unternehmenId: string | null;
  ansprechpartnerId: string | null;
  bewerberstatus: string | null;
  erstelltAm: string | null;
  kurzbeschreibungStelle: string | null;
  prozessGeschlossenWeil: string | null;
  startdatum: string | null;
  // ... andere relevante Felder
}

const columnLabels: { [key: string]: string } = {
  autogeneratedNr: 'Sales-Nr.',
  unternehmenId: 'Unternehmen',
  ansprechpartnerId: 'Ansprechpartner',
  bewerberstatus: 'Bewerberstatus',
  erstelltAm: 'Erstellt am',
  kurzbeschreibungStelle: 'Stellenbeschreibung',
  prozessGeschlossenWeil: 'Prozess geschlossen',
  startdatum: 'Startdatum',
  // ... andere Labels
};

const columnOrder: (keyof Sales)[] = [
  'autogeneratedNr',
  'unternehmenId',
  'ansprechpartnerId',
  'bewerberstatus',
  'erstelltAm',
  'kurzbeschreibungStelle',
  'startdatum',
];
const standardColumns: Set<keyof Sales> = new Set(columnOrder);

// DateRangeFilter Component
const DateRangeFilter: React.FC<{ column: any }> = ({ column }) => {
  const [date, setDate] = useState<DateRange | undefined>({
    from: undefined,
    to: undefined,
  });

  useEffect(() => {
    if (date?.from && date?.to) {
      column.setFilterValue(date);
    } else {
      column.setFilterValue(undefined);
    }
  }, [column, date]);

  return (
    <div className="p-2">
      <Popover>
        <PopoverTrigger asChild>
          <Button id="date" variant={'outline'} className={cn('w-full justify-start text-left font-normal', !date && 'text-muted-foreground')}>
            <CalendarIcon className="mr-2 h-4 w-4" />
            {date?.from ? (
              date.to ? (
                <>
                  {format(date.from, 'dd.MM.yyyy')} - {format(date.to, 'dd.MM.yyyy')}
                </>
              ) : (
                format(date.from, 'dd.MM.yyyy')
              )
            ) : (
              <span>Datum auswählen</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar initialFocus mode="range" defaultMonth={date?.from} selected={date} onSelect={setDate} numberOfMonths={2} />
        </PopoverContent>
      </Popover>
      {date?.from && date?.to && (
        <Button variant="ghost" onClick={() => setDate({ from: undefined, to: undefined })} className="mt-2 w-full">
          Filter zurücksetzen
        </Button>
      )}
    </div>
  );
};

// BewerberstatusFilter Component
const BewerberstatusFilter: React.FC<{ column: any }> = ({ column }) => {
  const [value, setValue] = useState<string>('ALL');

  const options = [
    { label: 'Alle', value: 'ALL' },
    { label: 'Offen', value: 'offen' },
    { label: 'In Bearbeitung', value: 'inBearbeitung' },
    { label: 'Abgeschlossen', value: 'abgeschlossen' },
    // Fügen Sie hier weitere Status-Optionen hinzu
  ];

  useEffect(() => {
    if (value === 'ALL') {
      column.setFilterValue(undefined);
    } else {
      column.setFilterValue(value);
    }
  }, [column, value]);

  return (
    <div className="space-y-2">
      <Select value={value} onValueChange={setValue}>
        <SelectTrigger className="w-[180px]">
          <SelectValue placeholder="Status wählen" />
        </SelectTrigger>
        <SelectContent>
          {options.map((option) => (
            <SelectItem key={option.value} value={option.value}>
              {option.label}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      {value !== 'ALL' && (
        <Button variant="ghost" size="sm" onClick={() => setValue('ALL')}>
          Filter zurücksetzen
        </Button>
      )}
    </div>
  );
};

const createColumns = (data: Sales[]): ColumnDef<Sales>[] => {
  const allFields = new Set<keyof Sales>([...columnOrder, ...Array.from(new Set(data.flatMap((item) => Object.keys(item) as (keyof Sales)[])))]);

  return Array.from(allFields).map(
    (key): ColumnDef<Sales> => ({
      accessorKey: key,
      header: ({ column }) => {
        return (
          <div className="flex items-center space-x-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="-ml-3 h-8 data-[state=open]:bg-accent">
                  <span>{columnLabels[key] || key}</span>
                  <ChevronDown className="ml-2 h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start" className="w-[200px]">
                <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                  <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                  Aufsteigend
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                  <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                  Absteigend
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>
                  <EyeOff className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                  Ausblenden
                </DropdownMenuItem>
                {key === 'bewerberstatus' && (
                  <>
                    <DropdownMenuSeparator />
                    <BewerberstatusFilter column={column} />
                  </>
                )}
                {(key === 'erstelltAm' || key === 'startdatum') && (
                  <>
                    <DropdownMenuSeparator />
                    <DateRangeFilter column={column} />
                  </>
                )}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        );
      },
      cell: ({ row }) => {
        const value = row.getValue(key);
        if (key === 'id' || key === 'unternehmenId' || key === 'ansprechpartnerId') {
          return (
            <Link
              href={`/${key === 'id' ? 'sales' : key === 'unternehmenId' ? 'unternehmen' : 'ansprechpartner'}/${value}`}
              className="text-blue-600 hover:underline"
            >
              {value as React.ReactNode}
            </Link>
          );
        }
        if (typeof value === 'boolean') {
          return <div className="w-[200px]">{value ? 'Ja' : 'Nein'}</div>;
        }
        return <div className="w-[200px]">{value?.toString() || '-'}</div>;
      },
    })
  );
};

export function SalesList() {
  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = useState({});
  const [data, setData] = useState<Sales[]>([]);
  const [isBulkActionSidebarOpen, setIsBulkActionSidebarOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchFilter, setSearchFilter] = useState('');

  useEffect(() => {
    const fetchSales = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch('/api/getSales');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const salesData = await response.json();
        setData(salesData);
      } catch (error) {
        console.error('Fehler beim Laden der Sales-Daten:', error);
        setError('Fehler beim Laden der Sales-Daten. Bitte versuchen Sie es später erneut.');
      } finally {
        setIsLoading(false);
      }
    };
    fetchSales();
  }, []);

  const columns = useMemo(() => {
    const dataColumns = createColumns(data);
    const selectColumn: ColumnDef<Sales> = {
      id: 'select',
      header: ({ table }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected()}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Alle auswählen"
        />
      ),
      cell: ({ row }) => (
        <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label="Zeile auswählen" />
      ),
      enableSorting: false,
      enableHiding: false,
    };

    return [selectColumn, ...dataColumns];
  }, [data]);

  useEffect(() => {
    const initialVisibility: VisibilityState = {};
    columns.forEach((column) => {
      if ('accessorKey' in column && typeof column.accessorKey === 'string') {
        initialVisibility[column.accessorKey] = standardColumns.has(column.accessorKey as keyof Sales);
      }
    });
    setColumnVisibility(initialVisibility);
  }, [columns]);

  const filteredData = useMemo(() => {
    return data.filter((sales) => {
      if (searchFilter) {
        return Object.values(sales).some((value) => typeof value === 'string' && value.toLowerCase().includes(searchFilter.toLowerCase()));
      }
      return true;
    });
  }, [data, searchFilter]);

  const table = useReactTable({
    data: filteredData,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  });

  const handleBulkUpdate = async (updates: any) => {
    const selectedIds = Object.keys(rowSelection);
    if (selectedIds.length === 0) return;

    try {
      const response = await fetch('/api/bulkUpdateSales', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds, updates }),
      });

      if (response.ok) {
        console.log('Massenaktualisierung erfolgreich durchgeführt');
        const updatedData = await fetch('/api/getSales').then((res) => res.json());
        setData(updatedData);
        setIsBulkActionSidebarOpen(false);
        setRowSelection({});
      } else {
        const errorData = await response.json();
        console.error('Fehler bei der Durchführung der Massenaktualisierung:', errorData.error);
      }
    } catch (error) {
      console.error('Fehler bei der Durchführung der Massenaktualisierung:', error);
    }
  };

  const handleBulkDelete = async () => {
    const selectedIds = Object.keys(rowSelection);
    if (selectedIds.length === 0) return;

    try {
      const response = await fetch('/api/bulkDeleteSales', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds }),
      });

      if (response.ok) {
        console.log('Massenlöschung erfolgreich durchgeführt');
        const updatedData = await fetch('/api/getSales').then((res) => res.json());
        setData(updatedData);
        setIsBulkActionSidebarOpen(false);
        setRowSelection({});
      } else {
        const errorData = await response.json();
        console.error('Fehler bei der Durchführung der Massenlöschung:', errorData.error);
      }
    } catch (error) {
      console.error('Fehler bei der Durchführung der Massenlöschung:', error);
    }
  };

  if (isLoading) {
    return <div>Lade Sales-Daten...</div>;
  }

  if (error) {
    return <div>Fehler: {error}</div>;
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <Input placeholder="Suche..." value={searchFilter} onChange={(e) => setSearchFilter(e.target.value)} className="max-w-sm" />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="ml-auto">
              Spalten <ChevronDown className="ml-2 h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            {table
              .getAllColumns()
              .filter((column) => column.id !== 'select' && typeof column.accessorFn !== 'undefined')
              .map((column) => {
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    className="capitalize"
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) => column.toggleVisibility(!!value)}
                  >
                    {columnLabels[column.id] || column.id}
                  </DropdownMenuCheckboxItem>
                );
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="rounded-md border bg-white">
        <ScrollArea className="w-full overflow-auto" style={{ maxWidth: '100%' }}>
          <Table style={{ minWidth: '1000px' }}>
            <TableHeader>
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <TableHead key={header.id} className="bg-gray-100">
                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                    </TableHead>
                  ))}
                </TableRow>
              ))}
            </TableHeader>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>
                    {row.getVisibleCells().map((cell) => (
                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>
                    ))}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={columns.length} className="h-24 text-center">
                    Keine Ergebnisse.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>
      <DataTablePagination table={table} />
      <div className="flex justify-between items-center">
        <div className="flex-1 text-sm text-muted-foreground">
          {table.getFilteredSelectedRowModel().rows.length} von {table.getFilteredRowModel().rows.length} Zeile(n) ausgewählt.
        </div>
        <div className="space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setIsBulkActionSidebarOpen(true)}
            disabled={table.getFilteredSelectedRowModel().rows.length === 0}
          >
            Massenbearbeitung
          </Button>
        </div>
      </div>
      {isBulkActionSidebarOpen && (
        <BulkActionSidebarSales
          isOpen={isBulkActionSidebarOpen}
          onClose={() => setIsBulkActionSidebarOpen(false)}
          selectedRows={Object.keys(rowSelection)}
          onUpdate={handleBulkUpdate}
          onDelete={handleBulkDelete}
        />
      )}
    </div>
  );
}

// BulkActionSidebarSales Component
const BulkActionSidebarSales: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  selectedRows: string[];
  onUpdate: (updates: any) => void;
  onDelete: () => void;
}> = ({ isOpen, onClose, selectedRows, onUpdate, onDelete }) => {
  const [newBewerberstatus, setNewBewerberstatus] = useState('');
  const [newProzessGeschlossenWeil, setNewProzessGeschlossenWeil] = useState('');

  const handleUpdate = () => {
    const updates: any = {};
    if (newBewerberstatus) updates.bewerberstatus = newBewerberstatus;
    if (newProzessGeschlossenWeil) updates.prozessGeschlossenWeil = newProzessGeschlossenWeil;
    onUpdate(updates);
  };

  return (
    <div
      className={`fixed inset-y-0 right-0 w-64 bg-white shadow-lg transform ${
        isOpen ? 'translate-x-0' : 'translate-x-full'
      } transition-transform duration-200 ease-in-out`}
    >
      <div className="p-4">
        <h2 className="text-lg font-bold mb-4">Massenbearbeitung</h2>
        <p>{selectedRows.length} Sales-Einträge ausgewählt</p>

        <div className="mt-4">
          <label className="block mb-2">Neuer Bewerberstatus:</label>
          <Select value={newBewerberstatus} onValueChange={setNewBewerberstatus}>
            <SelectTrigger>
              <SelectValue placeholder="Status wählen" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="offen">Offen</SelectItem>
              <SelectItem value="inBearbeitung">In Bearbeitung</SelectItem>
              <SelectItem value="abgeschlossen">Abgeschlossen</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="mt-4">
          <label className="block mb-2">Neuer Grund für Prozessabschluss:</label>
          <Input
            type="text"
            value={newProzessGeschlossenWeil}
            onChange={(e) => setNewProzessGeschlossenWeil(e.target.value)}
            placeholder="Grund eingeben"
          />
        </div>

        <div className="mt-6 space-y-2">
          <Button onClick={handleUpdate} className="w-full">
            Aktualisieren
          </Button>
          <Button onClick={onDelete} variant="destructive" className="w-full">
            Löschen
          </Button>
          <Button onClick={onClose} variant="outline" className="w-full">
            Abbrechen
          </Button>
        </div>
      </div>
    </div>
  );
};
