// SalesList.tsx
'use client';
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { format } from 'date-fns';
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  Row,
  Column,
} from '@tanstack/react-table';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
  DropdownMenuItem,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { DataTablePagination } from '@/components/ui/data-table-pagination';
import { ChevronDown, ArrowUpDown } from 'lucide-react';
import { Label } from '@/components/ui/label';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import BulkActionSidebar from '../BulkActionSidebar';
import Link from 'next/link';
import { LetterFilter } from '../list/letter-filter';
import { ColumnSelector } from '../list/column-selector';
import { GlobalSearch } from '../list/global-search';
import DateRangeFilter from '../list/DateRangeFilter';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

interface DateRange {
  from: Date | null;
  to: Date | null;
}

interface Sales {
  id: string;
  autogeneratedNr: number;
  unternehmen: { id: string; name: string } | null;
  absage: string | null;
  ansprechpartner: { id: string; name: string } | null;
  bewerberstatus: string | null;
  erstelltAm: string | null;
  erstelltVon: { id: string; name: string } | null;
  interview1: string | null;
  interview2: string | null;
  interview3: string | null;
  kurzbeschreibungStelle: string | null;
  letzteAenderungAm: string | null;
  notizen: string | null;
  prozessGeschlossenWeil: string | null;
  startdatum: string | null;
  vertragsgespraech: string | null;
  vorgestelltAm: string | null;
  bewerber: { id: string; name: string }[];
}

const columnLabels: { [key: string]: string } = {
  autogeneratedNr: 'Sales-Nr.',
  unternehmen: 'Unternehmen',
  absage: 'Absage',
  ansprechpartner: 'Ansprechpartner',
  bewerberstatus: 'Bewerberstatus',
  erstelltAm: 'Erstellt am',
  erstelltVon: 'Erstellt von',
  interview1: '1. Interview',
  interview2: '2. Interview',
  interview3: '3. Interview',
  kurzbeschreibungStelle: 'Kurzbeschreibung',
  letzteAenderungAm: 'Letzte Änderung',
  notizen: 'Notizen',
  prozessGeschlossenWeil: 'Prozess geschlossen',
  startdatum: 'Startdatum',
  vertragsgespraech: 'Vertragsgespräch',
  vorgestelltAm: 'Vorgestellt am',
  bewerber: 'Bewerber',
};

const standardColumns: (keyof Sales)[] = [
  'autogeneratedNr',
  'unternehmen',
  'bewerberstatus',
  'ansprechpartner',
  'kurzbeschreibungStelle',
  'erstelltAm',
  'letzteAenderungAm',
];

const renderCell = (key: string, row: Row<Sales>) => {
  const value = row.getValue(key);
  switch (key) {
    case 'unternehmen':
      return value ? (
        <Link href={`/unternehmen/${(value as { id: string; name: string }).id}`} className="text-blue-600 hover:underline">
          {(value as { id: string; name: string }).name}
        </Link>
      ) : (
        '-'
      );
    case 'ansprechpartner':
      return value ? (value as { id: string; name: string }).name : '-';
    case 'erstelltVon':
      return value ? (value as { id: string; name: string }).name : '-';
    case 'absage':
    case 'erstelltAm':
    case 'letzteAenderungAm':
    case 'interview1':
    case 'interview2':
    case 'interview3':
    case 'startdatum':
    case 'vertragsgespraech':
    case 'vorgestelltAm':
      return value ? format(new Date(value as string), 'dd.MM.yyyy') : '-';
    case 'bewerber':
      return (value as { id: string; name: string }[]).map((b) => b.name).join(', ');
    default:
      return (value as string) || '-';
  }
};

const createColumns = (data: Sales[]): ColumnDef<Sales>[] => {
  const allFields = new Set<string>();
  data.forEach((item) => Object.keys(item).forEach((key) => allFields.add(key)));

  allFields.delete('id');

  return Array.from(allFields).map(
    (key): ColumnDef<Sales> => ({
      accessorKey: key,
      header: ({ column }) => {
        return (
          <div className="flex items-center space-x-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  className="-ml-3 h-8 data-[state=open]:bg-accent"
                  aria-label={`${columnLabels[key] || key} Optionen`}
                >
                  <span>{columnLabels[key] || key.charAt(0).toUpperCase() + key.slice(1)}</span>
                  {column.getCanSort() && <ArrowUpDown className="ml-2 h-4 w-4" />}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start" className="w-80 p-4">
                <div className="text-base font-semibold mb-2">Optionen für {columnLabels[key] || key}</div>
                <div className="border-b my-2"></div>
                {column.getCanSort() && (
                  <div className="mb-4">
                    <div className="font-medium">Sortieren</div>
                    <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                      <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                      Aufsteigend
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                      <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                      Absteigend
                    </DropdownMenuItem>
                  </div>
                )}
                <div className="border-b my-2"></div>
                <div>
                  <div className="font-medium mb-2">Filter</div>
                  {key === 'absage' ||
                  key === 'erstelltAm' ||
                  key === 'letzteAenderungAm' ||
                  key === 'interview1' ||
                  key === 'interview2' ||
                  key === 'interview3' ||
                  key === 'startdatum' ||
                  key === 'vertragsgespraech' ||
                  key === 'vorgestelltAm' ? (
                    <DateRangeFilter column={column} />
                  ) : key === 'bewerberstatus' ? (
                    <Select value={(column.getFilterValue() as string) ?? ''} onValueChange={(value) => column.setFilterValue(value)}>
                      <SelectTrigger>
                        <SelectValue placeholder="Status auswählen" />
                      </SelectTrigger>
                      <SelectContent>
                        {['offen', 'in Bearbeitung', 'abgeschlossen', 'abgesagt'].map((status) => (
                          <SelectItem key={status} value={status}>
                            {status}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <Input
                      placeholder="Suchen..."
                      value={(column.getFilterValue() as string) ?? ''}
                      onChange={(event) => column.setFilterValue(event.target.value)}
                      className="max-w-sm"
                    />
                  )}
                </div>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        );
      },
      cell: ({ row }) => renderCell(key, row),
      sortingFn: (rowA, rowB, columnId) => {
        const a = rowA.getValue(columnId);
        const b = rowB.getValue(columnId);

        if (a === null || a === undefined) return 1;
        if (b === null || b === undefined) return -1;
        if (a === b) return 0;

        if (typeof a === 'number' && typeof b === 'number') {
          return a - b;
        }
        if (typeof a === 'string' && typeof b === 'string') {
          return a.localeCompare(b);
        }
        if (columnId === 'unternehmen' || columnId === 'ansprechpartner' || columnId === 'erstelltVon') {
          return (a as { name: string }).name.localeCompare((b as { name: string }).name);
        }
        if (columnId === 'bewerber') {
          return (a as { name: string }[])[0].name.localeCompare((b as { name: string }[])[0].name);
        }
        return 0;
      },
    })
  );
};

export function SalesList() {
  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = useState({});
  const [data, setData] = useState<Sales[]>([]);
  const [filterLetter, setFilterLetter] = useState('ALL');
  const [isBulkActionSidebarOpen, setIsBulkActionSidebarOpen] = useState(false);
  const [newStatus, setNewStatus] = useState('');
  const [newAnsprechpartner, setNewAnsprechpartner] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Initiales Laden der Daten
  useEffect(() => {
    const fetchSales = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch('/api/getSalesTest');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const salesData = await response.json();
        setData(salesData);
      } catch (error) {
        console.error('Fehler beim Laden der Sales-Daten:', error);
        setError('Fehler beim Laden der Sales-Daten. Bitte versuchen Sie es später erneut.');
      } finally {
        setIsLoading(false);
      }
    };
    fetchSales();
  }, []);

  // Definition der Spalten einschließlich der Auswahl-Spalte
  const columns = useMemo(() => {
    const allColumns = createColumns(data);
    const selectColumn: ColumnDef<Sales> = {
      id: 'select',
      header: ({ table }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected()}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Alle auswählen"
        />
      ),
      cell: ({ row }) => (
        <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label={`Zeile ${row.id} auswählen`} />
      ),
      enableSorting: false,
      enableHiding: false,
    };
    return [selectColumn, ...allColumns];
  }, [data]);

  // Laden der Spaltenansicht aus dem localStorage
  useEffect(() => {
    const savedColumnVisibility = localStorage.getItem('columnVisibility_sales-list');
    if (savedColumnVisibility) {
      const parsedVisibility = JSON.parse(savedColumnVisibility);
      setColumnVisibility(parsedVisibility);
    } else {
      const initialVisibility: VisibilityState = {};
      columns.forEach((column) => {
        if ('accessorKey' in column && typeof column.accessorKey === 'string') {
          initialVisibility[column.accessorKey] = standardColumns.includes(column.accessorKey as keyof Sales);
        }
      });
      setColumnVisibility(initialVisibility);
      localStorage.setItem('columnVisibility_sales-list', JSON.stringify(initialVisibility));
    }
  }, [columns]);

  // Ermitteln der verfügbaren Buchstaben für den Filter
  const availableLetters = useMemo(() => {
    const letters = new Set(data.map((sale) => sale.unternehmen?.name[0]?.toUpperCase()).filter(Boolean));
    return Array.from(letters).sort();
  }, [data]);

  // Anwenden des Buchstabenfilters
  const filteredData = useMemo(() => {
    if (filterLetter === 'ALL') return data;
    return data.filter((sale) => sale.unternehmen?.name.toUpperCase().startsWith(filterLetter));
  }, [data, filterLetter]);

  // Setup der Tabelle
  const table = useReactTable({
    data: filteredData,
    columns,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
    enableRowSelection: true,
    onRowSelectionChange: setRowSelection,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: (updatedVisibility) => {
      setColumnVisibility(updatedVisibility);
      localStorage.setItem('columnVisibility_sales-list', JSON.stringify(updatedVisibility));
    },
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getRowId: (row) => row.id,
  });

  // Handler für den Buchstabenfilter
  const handleFilterChange = useCallback(
    (letter: string) => {
      setFilterLetter(letter);
      table.resetPageIndex();
    },
    [table]
  );

  // Handler für Massenaktualisierung
  const handleBulkUpdate = async () => {
    const selectedIds = Object.keys(rowSelection);
    if (selectedIds.length === 0) return;

    const updates: Partial<Pick<Sales, 'bewerberstatus' | 'ansprechpartner'>> = {
      bewerberstatus: newStatus || undefined,
      ansprechpartner: newAnsprechpartner ? { id: newAnsprechpartner, name: '' } : undefined,
    };

    try {
      const response = await fetch('/api/bulkUpdateSales', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds, updates }),
      });

      if (response.ok) {
        toast.success('Massenaktualisierung erfolgreich durchgeführt');
        // Hier müssten Sie die Daten neu laden oder den State entsprechend aktualisieren
        setIsBulkActionSidebarOpen(false);
        setRowSelection({});
        setNewStatus('');
        setNewAnsprechpartner('');
      } else {
        toast.error('Fehler bei der Durchführung der Massenaktualisierung');
        console.error('Fehler bei der Durchführung der Massenaktualisierung');
      }
    } catch (error) {
      toast.error('Fehler bei der Durchführung der Massenaktualisierung');
      console.error('Fehler bei der Durchführung der Massenaktualisierung:', error);
    }
  };

  if (isLoading) {
    return <div>Lade Sales-Daten...</div>;
  }

  if (error) {
    return <div>Fehler: {error}</div>;
  }

  return (
    <div className="space-y-4">
      <ToastContainer />

      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2 overflow-x-auto">
          <LetterFilter availableLetters={availableLetters} currentFilter={filterLetter} onFilterChange={handleFilterChange} />
        </div>
        <div className="flex items-center space-x-2">
          <GlobalSearch table={table} />
          <ColumnSelector table={table} columnLabels={columnLabels} listId="sales-list" />
        </div>
      </div>

      <div className="rounded-md border bg-white">
        <ScrollArea className="w-full overflow-auto" style={{ maxWidth: '100%' }}>
          <Table style={{ minWidth: '1000px' }}>
            <TableHeader>
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <TableHead key={header.id} className="bg-gray-100">
                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                    </TableHead>
                  ))}
                </TableRow>
              ))}
            </TableHeader>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  <TableRow key={row.id} data-state={row.getIsSelected() ? 'selected' : undefined}>
                    {row.getVisibleCells().map((cell) => (
                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>
                    ))}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={columns.length} className="h-24 text-center">
                    Keine Ergebnisse.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>

      <DataTablePagination table={table} />

      <div className="flex justify-end">
        <Button variant="outline" onClick={() => setIsBulkActionSidebarOpen(true)} disabled={Object.keys(rowSelection).length === 0}>
          Massenbearbeitung
        </Button>
      </div>

      <BulkActionSidebar
        isOpen={isBulkActionSidebarOpen}
        selectedCount={Object.keys(rowSelection).length}
        onClose={() => setIsBulkActionSidebarOpen(false)}
        newStatus={newStatus}
        setNewStatus={setNewStatus}
        newAnsprechpartner={newAnsprechpartner}
        setNewAnsprechpartner={setNewAnsprechpartner}
        onUpdate={handleBulkUpdate}
      />
    </div>
  );
}
