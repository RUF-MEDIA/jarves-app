// AuftragList.tsx
'use client';
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { format } from 'date-fns';
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  Row,
  Column,
} from '@tanstack/react-table';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
  DropdownMenuItem,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { DataTablePagination } from '@/components/ui/data-table-pagination';
import { ChevronDown, ArrowUpDown, Star } from 'lucide-react';
import { Label } from '@/components/ui/label';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import BulkActionSidebar from '../BulkActionSidebar';
import Link from 'next/link';
import { LetterFilter } from '../list/letter-filter';
import { ColumnSelector } from '../list/column-selector';
import { GlobalSearch } from '../list/global-search';
import DateRangeFilter from '../list/DateRangeFilter';
import NumberRangeFilter from '../list/NumberRangeFilter';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// Interfaces
interface DateRange {
  from: Date | null;
  to: Date | null;
}

interface Betreuer {
  id: string;
  name: string;
}

interface Auftrag {
  id: string;
  autogeneratedNr: number;
  job: string | null;
  status: string | null;
  kategorie: number | null;
  einsatzort: string | null;
  postleitzahl: string | null;
  strasse: string | null;
  startAb: string | null;
  spaetestensZuBesetzenBis: string | null;
  grundgehaltBruttoJahr: number | null;
  gehaltObergrenzeBruttoJahr: number | null;
  anzahlOffenePositionen: string | null;
  erstelltAm: string;
  letzteAenderungAm: string | null;
  betreuer: Betreuer | null;
  // Optional dynamic fields can be added here
  [key: string]: string | number | boolean | Betreuer | DateRange | null;
}

// Column Labels
const columnLabels: { [key: string]: string } = {
  autogeneratedNr: 'Auftragsnummer',
  job: 'Job',
  status: 'Status',
  kategorie: 'Kategorie',
  einsatzort: 'Einsatzort',
  postleitzahl: 'Postleitzahl',
  strasse: 'Straße',
  startAb: 'Start ab',
  spaetestensZuBesetzenBis: 'Spätestens zu besetzen bis',
  grundgehaltBruttoJahr: 'Grundgehalt (Brutto/Jahr)',
  gehaltObergrenzeBruttoJahr: 'Gehaltsobergrenze (Brutto/Jahr)',
  anzahlOffenePositionen: 'Anzahl offener Positionen',
  erstelltAm: 'Erstellt am',
  letzteAenderungAm: 'Letzte Änderung am',
  betreuer: 'Betreuer',
};

// Standard Columns
const standardColumns: (keyof Auftrag)[] = [
  'autogeneratedNr',
  'job',
  'status',
  'kategorie',
  'einsatzort',
  'startAb',
  'spaetestensZuBesetzenBis',
  'betreuer',
  'erstelltAm',
  'letzteAenderungAm',
];

// Star Rating Component
const StarRating: React.FC<{ rating: number | null }> = ({ rating }) => {
  return (
    <div className="flex">
      {[1, 2, 3, 4, 5].map((star) => (
        <Star key={star} className={`h-4 w-4 ${rating !== null && star <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} />
      ))}
    </div>
  );
};

// Status Select Filter Component
const StatusSelectFilter: React.FC<{ column: Column<Auftrag, unknown>; options: string[] }> = ({ column, options }) => {
  const [selectedValue, setSelectedValue] = useState<string>('');

  useEffect(() => {
    column.setFilterValue(selectedValue || undefined);
  }, [selectedValue, column]);

  const handleReset = () => {
    setSelectedValue('');
    column.setFilterValue(undefined);
  };

  return (
    <div className="space-y-2">
      <Select value={selectedValue} onValueChange={(value) => setSelectedValue(value)}>
        <SelectTrigger>
          <SelectValue placeholder="Filter auswählen" />
        </SelectTrigger>
        <SelectContent>
          {options.map((option) => (
            <SelectItem key={option} value={option}>
              {option}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      {selectedValue && (
        <Button variant="ghost" size="sm" onClick={handleReset}>
          Filter zurücksetzen
        </Button>
      )}
    </div>
  );
};

// Star Rating Filter Component
const StarRatingFilter: React.FC<{ column: Column<Auftrag, unknown> }> = ({ column }) => {
  const [rating, setRating] = useState<number | null>(null);

  useEffect(() => {
    column.setFilterValue(rating);
  }, [rating, column]);

  const handleReset = () => setRating(null);

  return (
    <div className="flex flex-col space-y-2 p-2">
      <Label>Mindestbewertung</Label>
      <div className="flex">
        {[1, 2, 3, 4, 5].map((star) => (
          <Star
            key={star}
            className={`h-6 w-6 cursor-pointer ${rating !== null && star <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
            onClick={() => setRating(star === rating ? null : star)}
            aria-label={`Bewertung ${star}`}
          />
        ))}
      </div>
      {rating !== null && (
        <Button variant="ghost" size="sm" onClick={handleReset}>
          Filter zurücksetzen
        </Button>
      )}
    </div>
  );
};

// Render Cell Function
const renderCell = (key: string, row: Row<Auftrag>) => {
  const value = row.getValue(key);
  switch (key) {
    case 'job':
      return (
        <Link href={`/auftraege/${row.original.id}`} className="text-blue-600 hover:underline" target="_blank" rel="noopener noreferrer">
          {value as string}
        </Link>
      );
    case 'kategorie':
      return <StarRating rating={value as number | null} />;
    case 'betreuer':
      return <div className="w-[200px]">{(value as Auftrag['betreuer'])?.name || '-'}</div>;
    case 'erstelltAm':
    case 'letzteAenderungAm':
    case 'startAb':
    case 'spaetestensZuBesetzenBis':
      return <div className="w-[100px]">{value ? format(new Date(value as string), 'dd.MM.yyyy') : '-'}</div>;
    case 'grundgehaltBruttoJahr':
    case 'gehaltObergrenzeBruttoJahr':
      return <div className="w-[150px]">{value ? `${Number(value).toLocaleString('de-DE')} €` : '-'}</div>;
    default:
      return <div className="w-[200px]">{value?.toString() || '-'}</div>;
  }
};

// Optimized createColumns function
const createColumns = (data: Auftrag[]): ColumnDef<Auftrag>[] => {
  const allFields = new Set<string>();
  data.forEach((item) => Object.keys(item).forEach((key) => allFields.add(key)));

  allFields.delete('id');

  return Array.from(allFields).map(
    (key): ColumnDef<Auftrag> => ({
      accessorKey: key,
      header: ({ column }) => {
        const isJobColumn = key === 'job';

        return (
          <div className="flex items-center space-x-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  className={`-ml-3 h-8 data-[state=open]:bg-accent ${isJobColumn ? 'ml-0' : ''}`}
                  aria-label={`${columnLabels[key] || key} Optionen`}
                >
                  <span>{columnLabels[key] || key.charAt(0).toUpperCase() + key.slice(1)}</span>
                  {column.getCanSort() && <ArrowUpDown className="ml-2 h-4 w-4" />}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start" className="w-80 p-4">
                <div className="text-base font-semibold mb-2">Optionen für {columnLabels[key] || key}</div>
                <div className="border-b my-2"></div>
                {column.getCanSort() && (
                  <div className="mb-4">
                    <div className="font-medium">Sortieren</div>
                    <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
                      <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                      Aufsteigend
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
                      <ArrowUpDown className="mr-2 h-3.5 w-3.5 text-muted-foreground/70" />
                      Absteigend
                    </DropdownMenuItem>
                  </div>
                )}
                <div className="border-b my-2"></div>
                <div>
                  <div className="font-medium mb-2">Filter</div>
                  {key === 'erstelltAm' || key === 'letzteAenderungAm' || key === 'startAb' || key === 'spaetestensZuBesetzenBis' ? (
                    <DateRangeFilter column={column} />
                  ) : key === 'autogeneratedNr' || key === 'grundgehaltBruttoJahr' || key === 'gehaltObergrenzeBruttoJahr' ? (
                    <NumberRangeFilter column={column} />
                  ) : key === 'status' ? (
                    <StatusSelectFilter column={column} options={['offen', 'in Bearbeitung', 'geschlossen', 'on hold', 'storniert']} />
                  ) : key === 'kategorie' ? (
                    <StarRatingFilter column={column} />
                  ) : isJobColumn ? (
                    <div className="text-sm text-gray-600">Kein Filter verfügbar</div>
                  ) : (
                    <Input
                      placeholder="Suchen..."
                      value={(column.getFilterValue() as string) ?? ''}
                      onChange={(event) => column.setFilterValue(event.target.value)}
                      className="max-w-sm"
                    />
                  )}
                </div>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        );
      },
      cell: ({ row }) => renderCell(key, row),
      sortingFn: (rowA, rowB, columnId) => {
        const a = rowA.getValue(columnId);
        const b = rowB.getValue(columnId);

        if (a === null || a === undefined) return 1;
        if (b === null || b === undefined) return -1;
        if (a === b) return 0;

        if (typeof a === 'number' && typeof b === 'number') {
          return a - b;
        }
        if (typeof a === 'string' && typeof b === 'string') {
          return a.localeCompare(b);
        }
        if (key === 'betreuer') {
          return ((a as Auftrag['betreuer'])?.name || '').localeCompare((b as Auftrag['betreuer'])?.name || '');
        }
        if (key === 'erstelltAm' || key === 'letzteAenderungAm' || key === 'startAb' || key === 'spaetestensZuBesetzenBis') {
          return new Date(a as string).getTime() - new Date(b as string).getTime();
        }
        return 0;
      },
      filterFn: (row, id, filterValue) => {
        if (key === 'autogeneratedNr' || key === 'grundgehaltBruttoJahr' || key === 'gehaltObergrenzeBruttoJahr') {
          const value = row.getValue(id) as number;
          const [min, max] = filterValue as [number, number];
          return value >= min && value <= max;
        }
        if (key === 'kategorie') {
          const rating = row.getValue(id) as number | null;
          if (filterValue === null) return true;
          if (filterValue === 0) return rating === null || rating === 0;
          return rating !== null && rating >= filterValue;
        }
        if (key === 'status') {
          const status = row.getValue(id) as string;
          return filterValue === undefined || status === filterValue;
        }
        if (key === 'erstelltAm' || key === 'letzteAenderungAm' || key === 'startAb' || key === 'spaetestensZuBesetzenBis') {
          const date = row.getValue(id) as string;
          const cellDate = new Date(date);
          const { from, to } = filterValue as DateRange;

          if (from && to) {
            return cellDate >= from && cellDate <= to;
          }
          if (from) {
            return cellDate >= from;
          }
          if (to) {
            return cellDate <= to;
          }
          return true;
        }
        const cellValue = row.getValue(id);
        if (typeof cellValue === 'string') {
          return cellValue.toLowerCase().includes((filterValue as string).toLowerCase());
        }
        return String(cellValue)
          .toLowerCase()
          .includes((filterValue as string).toLowerCase());
      },
    })
  );
};

// AuftragList Component
export function AuftrageList() {
  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = useState({});
  const [data, setData] = useState<Auftrag[]>([]);
  const [filterLetter, setFilterLetter] = useState('ALL');
  const [isBulkActionSidebarOpen, setIsBulkActionSidebarOpen] = useState(false);
  const [newStatus, setNewStatus] = useState('');
  const [newBetreuer, setNewBetreuer] = useState('');
  const [newKategorie, setNewKategorie] = useState('');
  const [betreuerList, setBetreuerList] = useState<{ id: string; name: string }[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Initial data loading
  useEffect(() => {
    const fetchAuftraege = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch('/api/getAuftraegeTest');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const auftraege = await response.json();
        setData(auftraege);
      } catch (error) {
        console.error('Error loading Auftraege:', error);
        setError('Error loading Auftraege. Please try again later.');
      } finally {
        setIsLoading(false);
      }
    };
    fetchAuftraege();
  }, []);

  // Load Betreuer list
  useEffect(() => {
    const fetchBetreuerList = async () => {
      try {
        const response = await fetch('/api/getBetreuerList');
        if (response.ok) {
          const data = await response.json();
          setBetreuerList(data);
        }
      } catch (error) {
        console.error('Error loading Betreuer:', error);
      }
    };

    fetchBetreuerList();
  }, []);

  // Column definition including the selection column
  const columns = useMemo(() => {
    const allColumns = createColumns(data);
    const selectColumn: ColumnDef<Auftrag> = {
      id: 'select',
      header: ({ table }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected()}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
        />
      ),
      cell: ({ row }) => (
        <Checkbox checked={row.getIsSelected()} onCheckedChange={(value) => row.toggleSelected(!!value)} aria-label={`Select row ${row.id}`} />
      ),
      enableSorting: false,
      enableHiding: false,
    };
    return [selectColumn, ...allColumns];
  }, [data]);

  // Load column visibility from localStorage
  useEffect(() => {
    const savedColumnVisibility = localStorage.getItem('columnVisibility_auftrag-list');
    if (savedColumnVisibility) {
      const parsedVisibility = JSON.parse(savedColumnVisibility);
      setColumnVisibility(parsedVisibility);
    } else {
      const initialVisibility: VisibilityState = {};
      columns.forEach((column) => {
        if ('accessorKey' in column && typeof column.accessorKey === 'string') {
          initialVisibility[column.accessorKey] = standardColumns.includes(column.accessorKey as keyof Auftrag);
        }
      });
      setColumnVisibility(initialVisibility);
      localStorage.setItem('columnVisibility_auftrag-list', JSON.stringify(initialVisibility));
    }
  }, [columns]);

  // Determine available letters for filter
  const availableLetters = useMemo(() => {
    const letters = new Set(data.map((auftrag) => auftrag.job?.[0]?.toUpperCase()).filter((letter): letter is string => !!letter));
    return Array.from(letters).sort();
  }, [data]);

  // Apply letter filter
  const filteredData = useMemo(() => {
    if (filterLetter === 'ALL') return data;
    return data.filter((auftrag) => auftrag.job?.toUpperCase().startsWith(filterLetter));
  }, [data, filterLetter]);

  // Table setup
  const table = useReactTable({
    data: filteredData,
    columns,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
    enableRowSelection: true,
    onRowSelectionChange: setRowSelection,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: (updatedVisibility) => {
      setColumnVisibility(updatedVisibility);
      localStorage.setItem('columnVisibility_auftrag-list', JSON.stringify(updatedVisibility));
    },
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getRowId: (row) => row.id,
  });

  // Letter filter handler
  const handleFilterChange = useCallback(
    (letter: string) => {
      setFilterLetter(letter);
      table.resetPageIndex();
    },
    [table]
  );

  // Bulk update handler
  const handleBulkUpdate = async () => {
    const selectedIds = Object.keys(rowSelection);
    if (selectedIds.length === 0) return;

    const updates: Partial<Pick<Auftrag, 'status' | 'kategorie' | 'betreuerId'>> = {
      status: newStatus || undefined,
      kategorie: newKategorie ? Number(newKategorie) : undefined,
      betreuerId: newBetreuer || undefined,
    };

    try {
      const response = await fetch('/api/bulkUpdateAuftrag', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds, updates }),
      });

      if (response.ok) {
        toast.success('Bulk update successfully completed');
        setData((prevData) => prevData.map((auftrag) => (selectedIds.includes(auftrag.id) ? { ...auftrag, ...updates } : auftrag)));
        setIsBulkActionSidebarOpen(false);
        setRowSelection({});
        setNewStatus('');
        setNewKategorie('');
        setNewBetreuer('');
      } else {
        toast.error('Error performing bulk update');
        console.error('Error performing bulk update');
      }
    } catch (error) {
      toast.error('Error performing bulk update');
      console.error('Error performing bulk update:', error);
    }
  };

  // Bulk delete handler
  const handleBulkDelete = async () => {
    const selectedIds = Object.keys(rowSelection);
    if (selectedIds.length === 0) return;

    const confirmDelete = window.confirm('Are you sure you want to delete the selected Aufträge?');
    if (!confirmDelete) return;

    try {
      const response = await fetch('/api/bulkDeleteAuftrag', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds }),
      });

      if (response.ok) {
        toast.success('Bulk delete successfully completed');
        setData((prevData) => prevData.filter((auftrag) => !selectedIds.includes(auftrag.id)));
        setIsBulkActionSidebarOpen(false);
        setRowSelection({});
      } else {
        toast.error('Error performing bulk delete');
        console.error('Error performing bulk delete');
      }
    } catch (error) {
      toast.error('Error performing bulk delete');
      console.error('Error performing bulk delete:', error);
    }
  };

  if (isLoading) {
    return <div>Loading Aufträge...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div className="space-y-4">
      {/* Toast Container for notifications */}
      <ToastContainer />

      {/* Filter and search bar */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2 overflow-x-auto">
          <LetterFilter availableLetters={availableLetters} currentFilter={filterLetter} onFilterChange={handleFilterChange} />
        </div>
        <div className="flex items-center space-x-2">
          <GlobalSearch table={table} />
          <ColumnSelector table={table} columnLabels={columnLabels} listId="auftrag-list" />
        </div>
      </div>

      {/* Table */}
      <div className="rounded-md border bg-white">
        <ScrollArea className="w-full overflow-auto" style={{ maxWidth: '100%' }}>
          <Table style={{ minWidth: '1000px' }}>
            <TableHeader>
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <TableHead key={header.id} className="bg-gray-100">
                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                    </TableHead>
                  ))}
                </TableRow>
              ))}
            </TableHeader>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  <TableRow key={row.id} data-state={row.getIsSelected() ? 'selected' : undefined}>
                    {row.getVisibleCells().map((cell) => (
                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>
                    ))}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={columns.length} className="h-24 text-center">
                    No results.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>

      {/* Pagination */}
      <DataTablePagination table={table} />

      {/* Bulk action button */}
      <div className="flex justify-end">
        <Button variant="outline" onClick={() => setIsBulkActionSidebarOpen(true)} disabled={Object.keys(rowSelection).length === 0}>
          Bulk Actions
        </Button>
      </div>

      {/* Bulk Action Sidebar */}
      <BulkActionSidebar
        isOpen={isBulkActionSidebarOpen}
        selectedCount={Object.keys(rowSelection).length}
        onClose={() => setIsBulkActionSidebarOpen(false)}
        newStatus={newStatus}
        setNewStatus={setNewStatus}
        newBetreuer={newBetreuer}
        setNewBetreuer={setNewBetreuer}
        newKategorie={newKategorie}
        setNewKategorie={setNewKategorie}
        onDelete={handleBulkDelete}
        onUpdate={handleBulkUpdate}
        newVerknuepfung={''}
        setNewVerknuepfung={function (value: string): void {
          throw new Error('Function not implemented.');
        }}
      />
    </div>
  );
}
