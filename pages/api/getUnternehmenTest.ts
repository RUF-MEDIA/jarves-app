// pages/api/getUnternehmenTest.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import prisma from '@/lib/prisma';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'GET') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  try {
    const unternehmen = await prisma.unternehmen.findMany({
      include: {
        betreuer: {
          select: {
            id: true,
            vorname: true,
            name: true,
          },
        },
      },
    });

    const formattedUnternehmen = unternehmen.map((u) => ({
      id: u.id,
      autogeneratedNr: u.autogeneratedNr,
      name: u.name,
      status: u.status,
      kategorie: u.kategorie,
      strasse: u.strasse,
      postleitzahl: u.postleitzahl,
      stadt: u.stadt,
      umsatzsteuerId: u.umsatzsteuerId,
      standort: u.standort,
      homepage: u.homepage,
      jobsite: u.jobsite,
      linkedin: u.linkedin,
      xing: u.xing,
      zentraleMail: u.zentraleMail,
      zentralTelefon: u.zentralTelefon,
      vermittlungsprovision: u.vermittlungsprovision,
      usbBeschreibung: u.usbBeschreibung,
      interneNotizen: u.interneNotizen,
      erstelltAm: u.erstelltAm.toISOString(),
      letzteAenderungAm: u.letzteAenderungAm?.toISOString(),
      betreuer: u.betreuer
        ? {
            id: u.betreuer.id,
            name: `${u.betreuer.vorname} ${u.betreuer.name}`,
          }
        : null,
    }));

    res.status(200).json(formattedUnternehmen);
  } catch (error) {
    console.error('Error fetching companies:', error);
    res.status(500).json({ message: 'Internal Server Error', error: error instanceof Error ? error.message : String(error) });
  }
}
