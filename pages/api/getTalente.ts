// pages/api/getTalente.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import prisma from '@/lib/prisma';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'GET') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  try {
    const bewerber = await prisma.bewerber.findMany();

    const formattedBewerber = bewerber.map((b) => ({
      id: b.id,
      autogeneratedNr: b.autogeneratedNr,
      vorname: b.vorname,
      nachname: b.nachname,
      email: b.email,
      status: b.status,
      ansprache: b.ansprache,
      betreuerId: b.betreuerId,
      jobfield: b.jobfield,
      erstelltAm: b.erstelltAm,
      letzteAenderungAm: b.letzteAenderungAm,
      gehaltswunschBruttoJahr: b.gehaltswunschBruttoJahr,
      homeOffice: b.homeOffice,
      arbeitszeit: b.arbeitszeit,
      erfahrungInJobfield: b.erfahrungInJobfield,
      jobtitelWunsch: b.jobtitelWunsch,
      kategorie: b.kategorie,
      freitextFuerZusatzinfos: b.freitextFuerZusatzinfos,
      linkedin: b.linkedin,
      xing: b.xing,
      telefon: b.telefon,
      handy: b.handy,
      postleitzahl: b.postleitzahl,
      stadt: b.stadt,
      region: b.region,
      verfuegbarkeitKuendigungsfrist: b.verfuegbarkeitKuendigungsfrist,
      // FÃ¼gen Sie hier weitere relevante Felder hinzu
    }));

    res.status(200).json(formattedBewerber);
  } catch (error) {
    console.error('Error fetching talents:', error);
    res.status(500).json({ message: 'Internal Server Error', error: error instanceof Error ? error.message : String(error) });
  }
}
