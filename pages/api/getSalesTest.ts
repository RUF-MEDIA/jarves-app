// pages/api/getSalesTest.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import prisma from '@/lib/prisma';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'GET') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  try {
    const sales = await prisma.sales.findMany({
      include: {
        unternehmen: {
          select: {
            id: true,
            name: true,
          },
        },
        ansprechpartner: {
          select: {
            id: true,
            vorname: true,
            nachname: true,
          },
        },
        erstelltVon: {
          select: {
            id: true,
            vorname: true,
            name: true,
          },
        },
        bewerber: {
          select: {
            id: true,
            vorname: true,
            nachname: true,
          },
        },
      },
    });

    const formattedSales = sales.map((s) => ({
      id: s.id,
      autogeneratedNr: s.autogeneratedNr,
      unternehmen: s.unternehmen
        ? {
            id: s.unternehmen.id,
            name: s.unternehmen.name,
          }
        : null,
      absage: s.absage?.toISOString(),
      ansprechpartner: s.ansprechpartner
        ? {
            id: s.ansprechpartner.id,
            name: `${s.ansprechpartner.vorname} ${s.ansprechpartner.nachname}`,
          }
        : null,
      bewerberstatus: s.bewerberstatus,
      erstelltAm: s.erstelltAm?.toISOString(),
      erstelltVon: s.erstelltVon
        ? {
            id: s.erstelltVon.id,
            name: `${s.erstelltVon.vorname} ${s.erstelltVon.name}`,
          }
        : null,
      interview1: s.interview1?.toISOString(),
      interview2: s.interview2?.toISOString(),
      interview3: s.interview3?.toISOString(),
      kurzbeschreibungStelle: s.kurzbeschreibungStelle,
      letzteAenderungAm: s.letzteAenderungAm?.toISOString(),
      notizen: s.notizen,
      prozessGeschlossenWeil: s.prozessGeschlossenWeil,
      startdatum: s.startdatum?.toISOString(),
      vertragsgespraech: s.vertragsgespraech?.toISOString(),
      vorgestelltAm: s.vorgestelltAm?.toISOString(),
      bewerber: s.bewerber.map((b) => ({
        id: b.id,
        name: `${b.vorname} ${b.nachname}`,
      })),
    }));

    res.status(200).json(formattedSales);
  } catch (error) {
    console.error('Error fetching sales:', error);
    res.status(500).json({ message: 'Internal Server Error', error: error instanceof Error ? error.message : String(error) });
  }
}
